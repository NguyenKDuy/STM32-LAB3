
VXL-LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000291c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000064  08002ab8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002ab8  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098ed  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d56  00000000  00000000  0002997a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172bb  00000000  00000000  0002cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d061  00000000  00000000  00043dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082520  00000000  00000000  00050e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d334c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000d33a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a10 	.word	0x08002a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002a10 	.word	0x08002a10

0800014c <getKeyInput>:
int button_counter[NUM_BUT];
int counter[NUM_BUT] = {100,100,100};
int button_flag[NUM_BUT];


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUT; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e068      	b.n	800022a <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 8000158:	4a38      	ldr	r2, [pc, #224]	; (800023c <getKeyInput+0xf0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4937      	ldr	r1, [pc, #220]	; (8000240 <getKeyInput+0xf4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000168:	4a36      	ldr	r2, [pc, #216]	; (8000244 <getKeyInput+0xf8>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4932      	ldr	r1, [pc, #200]	; (800023c <getKeyInput+0xf0>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = isReadfrom(i);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f000 f88d 	bl	8000298 <isReadfrom>
 800017e:	4602      	mov	r2, r0
 8000180:	4930      	ldr	r1, [pc, #192]	; (8000244 <getKeyInput+0xf8>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 8000188:	4a2d      	ldr	r2, [pc, #180]	; (8000240 <getKeyInput+0xf4>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	492a      	ldr	r1, [pc, #168]	; (800023c <getKeyInput+0xf0>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000198:	429a      	cmp	r2, r3
 800019a:	d143      	bne.n	8000224 <getKeyInput+0xd8>
 800019c:	4a27      	ldr	r2, [pc, #156]	; (800023c <getKeyInput+0xf0>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4927      	ldr	r1, [pc, #156]	; (8000244 <getKeyInput+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d139      	bne.n	8000224 <getKeyInput+0xd8>
			if (KeyReg3[i] != KeyReg2[i]){
 80001b0:	4a25      	ldr	r2, [pc, #148]	; (8000248 <getKeyInput+0xfc>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4922      	ldr	r1, [pc, #136]	; (8000244 <getKeyInput+0xf8>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d01b      	beq.n	80001fc <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 80001c4:	4a1f      	ldr	r2, [pc, #124]	; (8000244 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	491e      	ldr	r1, [pc, #120]	; (8000248 <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED){
 80001d4:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <getKeyInput+0xf8>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d121      	bne.n	8000224 <getKeyInput+0xd8>
					button_counter[i] = counter[i];
 80001e0:	4a1a      	ldr	r2, [pc, #104]	; (800024c <getKeyInput+0x100>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4919      	ldr	r1, [pc, #100]	; (8000250 <getKeyInput+0x104>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					button_flag[i] = 1;
 80001f0:	4a18      	ldr	r2, [pc, #96]	; (8000254 <getKeyInput+0x108>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fa:	e013      	b.n	8000224 <getKeyInput+0xd8>
				}
			}
			else {
				button_counter[i]--;
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <getKeyInput+0x104>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000204:	1e5a      	subs	r2, r3, #1
 8000206:	4912      	ldr	r1, [pc, #72]	; (8000250 <getKeyInput+0x104>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (button_counter[i] == 0) {
 800020e:	4a10      	ldr	r2, [pc, #64]	; (8000250 <getKeyInput+0x104>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d104      	bne.n	8000224 <getKeyInput+0xd8>
					KeyReg3[i] = NORMAL;
 800021a:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <getKeyInput+0xfc>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2101      	movs	r1, #1
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUT; i++) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b02      	cmp	r3, #2
 800022e:	dd93      	ble.n	8000158 <getKeyInput+0xc>
				}
			}
		}
	}

}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000000c 	.word	0x2000000c
 8000240:	20000000 	.word	0x20000000
 8000244:	20000018 	.word	0x20000018
 8000248:	20000024 	.word	0x20000024
 800024c:	20000030 	.word	0x20000030
 8000250:	20000088 	.word	0x20000088
 8000254:	20000094 	.word	0x20000094

08000258 <isKeyPressed>:
int isKeyPressed(int index) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (index <NUM_BUT) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b02      	cmp	r3, #2
 8000264:	dc0e      	bgt.n	8000284 <isKeyPressed+0x2c>
		if (button_flag[index] == 1){
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <isKeyPressed+0x3c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d106      	bne.n	8000280 <isKeyPressed+0x28>
			button_flag[index] = 0;
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <isKeyPressed+0x3c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2100      	movs	r1, #0
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e003      	b.n	8000288 <isKeyPressed+0x30>
		}
		return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	e001      	b.n	8000288 <isKeyPressed+0x30>
	}
	return -1;
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000094 	.word	0x20000094

08000298 <isReadfrom>:



int isReadfrom (int index) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (index < NUM_BUT) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	dc21      	bgt.n	80002ea <isReadfrom+0x52>
		switch (index){
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d017      	beq.n	80002dc <isReadfrom+0x44>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	dc1d      	bgt.n	80002ee <isReadfrom+0x56>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <isReadfrom+0x28>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d007      	beq.n	80002ce <isReadfrom+0x36>
				break;
			case 2:
				return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
				break;
			default:
				break;
 80002be:	e016      	b.n	80002ee <isReadfrom+0x56>
				return HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 80002c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <isReadfrom+0x64>)
 80002c6:	f001 fb77 	bl	80019b8 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	e012      	b.n	80002f4 <isReadfrom+0x5c>
				return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80002ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <isReadfrom+0x64>)
 80002d4:	f001 fb70 	bl	80019b8 <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	e00b      	b.n	80002f4 <isReadfrom+0x5c>
				return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e0:	4806      	ldr	r0, [pc, #24]	; (80002fc <isReadfrom+0x64>)
 80002e2:	f001 fb69 	bl	80019b8 <HAL_GPIO_ReadPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	e004      	b.n	80002f4 <isReadfrom+0x5c>
		}
	}
 80002ea:	bf00      	nop
 80002ec:	e000      	b.n	80002f0 <isReadfrom+0x58>
				break;
 80002ee:	bf00      	nop
	return -1;
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40011000 	.word	0x40011000

08000300 <fsm_automatic_run>:
int ambertime = 6;
int count0, count1;
int led_buffer[4] = {1, 2, 3, 4};


void fsm_automatic_run() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	switch(status){
 8000304:	4b99      	ldr	r3, [pc, #612]	; (800056c <fsm_automatic_run+0x26c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	2b0c      	cmp	r3, #12
 800030c:	f200 818b 	bhi.w	8000626 <fsm_automatic_run+0x326>
 8000310:	a201      	add	r2, pc, #4	; (adr r2, 8000318 <fsm_automatic_run+0x18>)
 8000312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000316:	bf00      	nop
 8000318:	0800034d 	.word	0x0800034d
 800031c:	08000627 	.word	0x08000627
 8000320:	08000627 	.word	0x08000627
 8000324:	08000627 	.word	0x08000627
 8000328:	08000627 	.word	0x08000627
 800032c:	08000627 	.word	0x08000627
 8000330:	08000627 	.word	0x08000627
 8000334:	08000627 	.word	0x08000627
 8000338:	08000627 	.word	0x08000627
 800033c:	0800038b 	.word	0x0800038b
 8000340:	0800042f 	.word	0x0800042f
 8000344:	080004d3 	.word	0x080004d3
 8000348:	08000585 	.word	0x08000585
	case MODE0:
		//TODO:
		set_off0_off1();
 800034c:	f000 ff52 	bl	80011f4 <set_off0_off1>
		setTimer(1,1250);
 8000350:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fe4b 	bl	8000ff0 <setTimer>
		setTimer(2,250);
 800035a:	21fa      	movs	r1, #250	; 0xfa
 800035c:	2002      	movs	r0, #2
 800035e:	f000 fe47 	bl	8000ff0 <setTimer>
		count0 = redtime;								//changable
 8000362:	4b83      	ldr	r3, [pc, #524]	; (8000570 <fsm_automatic_run+0x270>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a83      	ldr	r2, [pc, #524]	; (8000574 <fsm_automatic_run+0x274>)
 8000368:	6013      	str	r3, [r2, #0]
		count1 = greentime;
 800036a:	4b83      	ldr	r3, [pc, #524]	; (8000578 <fsm_automatic_run+0x278>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a83      	ldr	r2, [pc, #524]	; (800057c <fsm_automatic_run+0x27c>)
 8000370:	6013      	str	r3, [r2, #0]
		status = AUTO_RED_GREEN;
 8000372:	4b7e      	ldr	r3, [pc, #504]	; (800056c <fsm_automatic_run+0x26c>)
 8000374:	220a      	movs	r2, #10
 8000376:	601a      	str	r2, [r3, #0]
		setBuffer(redtime, greentime);
 8000378:	4b7d      	ldr	r3, [pc, #500]	; (8000570 <fsm_automatic_run+0x270>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a7e      	ldr	r2, [pc, #504]	; (8000578 <fsm_automatic_run+0x278>)
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	4611      	mov	r1, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fcba 	bl	8000cfc <setBuffer>
		break;
 8000388:	e156      	b.n	8000638 <fsm_automatic_run+0x338>
	case AUTO_RED_GREEN:
		set_red0_green1();
 800038a:	f000 ff5d 	bl	8001248 <set_red0_green1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 800038e:	2001      	movs	r0, #1
 8000390:	f000 fe82 	bl	8001098 <getFlag>
 8000394:	4603      	mov	r3, r0
 8000396:	2b01      	cmp	r3, #1
 8000398:	d12d      	bne.n	80003f6 <fsm_automatic_run+0xf6>
			setTimer(1, 1000);
 800039a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 fe26 	bl	8000ff0 <setTimer>
			count0--;
 80003a4:	4b73      	ldr	r3, [pc, #460]	; (8000574 <fsm_automatic_run+0x274>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4a72      	ldr	r2, [pc, #456]	; (8000574 <fsm_automatic_run+0x274>)
 80003ac:	6013      	str	r3, [r2, #0]
			count1--;
 80003ae:	4b73      	ldr	r3, [pc, #460]	; (800057c <fsm_automatic_run+0x27c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a71      	ldr	r2, [pc, #452]	; (800057c <fsm_automatic_run+0x27c>)
 80003b6:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 80003b8:	4b6e      	ldr	r3, [pc, #440]	; (8000574 <fsm_automatic_run+0x274>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a6f      	ldr	r2, [pc, #444]	; (800057c <fsm_automatic_run+0x27c>)
 80003be:	6812      	ldr	r2, [r2, #0]
 80003c0:	4611      	mov	r1, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fc9a 	bl	8000cfc <setBuffer>
			if (count1 == 0) {
 80003c8:	4b6c      	ldr	r3, [pc, #432]	; (800057c <fsm_automatic_run+0x27c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d112      	bne.n	80003f6 <fsm_automatic_run+0xf6>
				status = AUTO_RED_YELLOW;
 80003d0:	4b66      	ldr	r3, [pc, #408]	; (800056c <fsm_automatic_run+0x26c>)
 80003d2:	220b      	movs	r2, #11
 80003d4:	601a      	str	r2, [r3, #0]
				count1 = ambertime;
 80003d6:	4b6a      	ldr	r3, [pc, #424]	; (8000580 <fsm_automatic_run+0x280>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a68      	ldr	r2, [pc, #416]	; (800057c <fsm_automatic_run+0x27c>)
 80003dc:	6013      	str	r3, [r2, #0]
				count0 = ambertime;
 80003de:	4b68      	ldr	r3, [pc, #416]	; (8000580 <fsm_automatic_run+0x280>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a64      	ldr	r2, [pc, #400]	; (8000574 <fsm_automatic_run+0x274>)
 80003e4:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <fsm_automatic_run+0x274>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a64      	ldr	r2, [pc, #400]	; (800057c <fsm_automatic_run+0x27c>)
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	4611      	mov	r1, r2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fc83 	bl	8000cfc <setBuffer>
			}
//			countdown();
		}
		if (getFlag(2)) {
 80003f6:	2002      	movs	r0, #2
 80003f8:	f000 fe4e 	bl	8001098 <getFlag>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d005      	beq.n	800040e <fsm_automatic_run+0x10e>
			setTimer(2,250);
 8000402:	21fa      	movs	r1, #250	; 0xfa
 8000404:	2002      	movs	r0, #2
 8000406:	f000 fdf3 	bl	8000ff0 <setTimer>
			led7seg_run();
 800040a:	f000 fc61 	bl	8000cd0 <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff ff22 	bl	8000258 <isKeyPressed>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	f000 8107 	beq.w	800062a <fsm_automatic_run+0x32a>
			status = MAN_RED_GREEN;
 800041c:	4b53      	ldr	r3, [pc, #332]	; (800056c <fsm_automatic_run+0x26c>)
 800041e:	2206      	movs	r2, #6
 8000420:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 8000422:	f242 7110 	movw	r1, #10000	; 0x2710
 8000426:	2001      	movs	r0, #1
 8000428:	f000 fde2 	bl	8000ff0 <setTimer>
		}
		break;
 800042c:	e0fd      	b.n	800062a <fsm_automatic_run+0x32a>
	case AUTO_RED_YELLOW:
		set_red0_amber1();
 800042e:	f000 ff35 	bl	800129c <set_red0_amber1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 8000432:	2001      	movs	r0, #1
 8000434:	f000 fe30 	bl	8001098 <getFlag>
 8000438:	4603      	mov	r3, r0
 800043a:	2b01      	cmp	r3, #1
 800043c:	d12d      	bne.n	800049a <fsm_automatic_run+0x19a>
			setTimer(1, 1000);
 800043e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fdd4 	bl	8000ff0 <setTimer>
			count0--;
 8000448:	4b4a      	ldr	r3, [pc, #296]	; (8000574 <fsm_automatic_run+0x274>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	4a49      	ldr	r2, [pc, #292]	; (8000574 <fsm_automatic_run+0x274>)
 8000450:	6013      	str	r3, [r2, #0]
			count1--;
 8000452:	4b4a      	ldr	r3, [pc, #296]	; (800057c <fsm_automatic_run+0x27c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3b01      	subs	r3, #1
 8000458:	4a48      	ldr	r2, [pc, #288]	; (800057c <fsm_automatic_run+0x27c>)
 800045a:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 800045c:	4b45      	ldr	r3, [pc, #276]	; (8000574 <fsm_automatic_run+0x274>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a46      	ldr	r2, [pc, #280]	; (800057c <fsm_automatic_run+0x27c>)
 8000462:	6812      	ldr	r2, [r2, #0]
 8000464:	4611      	mov	r1, r2
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fc48 	bl	8000cfc <setBuffer>
			if (count1 == 0) {
 800046c:	4b43      	ldr	r3, [pc, #268]	; (800057c <fsm_automatic_run+0x27c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d112      	bne.n	800049a <fsm_automatic_run+0x19a>
				status = AUTO_GREEN_RED;
 8000474:	4b3d      	ldr	r3, [pc, #244]	; (800056c <fsm_automatic_run+0x26c>)
 8000476:	220c      	movs	r2, #12
 8000478:	601a      	str	r2, [r3, #0]
				count0 = greentime;						//changable
 800047a:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <fsm_automatic_run+0x278>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a3d      	ldr	r2, [pc, #244]	; (8000574 <fsm_automatic_run+0x274>)
 8000480:	6013      	str	r3, [r2, #0]
				count1 = redtime;
 8000482:	4b3b      	ldr	r3, [pc, #236]	; (8000570 <fsm_automatic_run+0x270>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a3d      	ldr	r2, [pc, #244]	; (800057c <fsm_automatic_run+0x27c>)
 8000488:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 800048a:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <fsm_automatic_run+0x274>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a3b      	ldr	r2, [pc, #236]	; (800057c <fsm_automatic_run+0x27c>)
 8000490:	6812      	ldr	r2, [r2, #0]
 8000492:	4611      	mov	r1, r2
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fc31 	bl	8000cfc <setBuffer>

			}
//			countdown();
		}
		if (getFlag(2)) {
 800049a:	2002      	movs	r0, #2
 800049c:	f000 fdfc 	bl	8001098 <getFlag>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d005      	beq.n	80004b2 <fsm_automatic_run+0x1b2>
			setTimer(2,250);
 80004a6:	21fa      	movs	r1, #250	; 0xfa
 80004a8:	2002      	movs	r0, #2
 80004aa:	f000 fda1 	bl	8000ff0 <setTimer>
			led7seg_run();
 80004ae:	f000 fc0f 	bl	8000cd0 <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 80004b2:	2000      	movs	r0, #0
 80004b4:	f7ff fed0 	bl	8000258 <isKeyPressed>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f000 80b7 	beq.w	800062e <fsm_automatic_run+0x32e>
			setTimer(1, 10000);
 80004c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fd93 	bl	8000ff0 <setTimer>
			status = MAN_RED_YELLOW;
 80004ca:	4b28      	ldr	r3, [pc, #160]	; (800056c <fsm_automatic_run+0x26c>)
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
		}
		break;
 80004d0:	e0ad      	b.n	800062e <fsm_automatic_run+0x32e>
	case AUTO_GREEN_RED:
		set_green0_red1();
 80004d2:	f000 ff0d 	bl	80012f0 <set_green0_red1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fdde 	bl	8001098 <getFlag>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d129      	bne.n	8000536 <fsm_automatic_run+0x236>
			setTimer(1, 1000);
 80004e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fd82 	bl	8000ff0 <setTimer>
			count0--;
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <fsm_automatic_run+0x274>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	4a20      	ldr	r2, [pc, #128]	; (8000574 <fsm_automatic_run+0x274>)
 80004f4:	6013      	str	r3, [r2, #0]
			count1--;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <fsm_automatic_run+0x27c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4a1f      	ldr	r2, [pc, #124]	; (800057c <fsm_automatic_run+0x27c>)
 80004fe:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <fsm_automatic_run+0x274>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <fsm_automatic_run+0x27c>)
 8000506:	6812      	ldr	r2, [r2, #0]
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fbf6 	bl	8000cfc <setBuffer>
			if (count0 == 0) {
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <fsm_automatic_run+0x274>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d10e      	bne.n	8000536 <fsm_automatic_run+0x236>
				status = AUTO_YELLOW_RED;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <fsm_automatic_run+0x26c>)
 800051a:	220d      	movs	r2, #13
 800051c:	601a      	str	r2, [r3, #0]
				count0 = ambertime;						//changable
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <fsm_automatic_run+0x280>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a14      	ldr	r2, [pc, #80]	; (8000574 <fsm_automatic_run+0x274>)
 8000524:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <fsm_automatic_run+0x274>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a14      	ldr	r2, [pc, #80]	; (800057c <fsm_automatic_run+0x27c>)
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fbe3 	bl	8000cfc <setBuffer>
			}
//			countdown();
		}
		if (getFlag(2)) {
 8000536:	2002      	movs	r0, #2
 8000538:	f000 fdae 	bl	8001098 <getFlag>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d005      	beq.n	800054e <fsm_automatic_run+0x24e>
			setTimer(2,250);
 8000542:	21fa      	movs	r1, #250	; 0xfa
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fd53 	bl	8000ff0 <setTimer>
			led7seg_run();
 800054a:	f000 fbc1 	bl	8000cd0 <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fe82 	bl	8000258 <isKeyPressed>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d06b      	beq.n	8000632 <fsm_automatic_run+0x332>
			setTimer(1, 10000);
 800055a:	f242 7110 	movw	r1, #10000	; 0x2710
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fd46 	bl	8000ff0 <setTimer>
			status = MAN_GREEN_RED;
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <fsm_automatic_run+0x26c>)
 8000566:	2208      	movs	r2, #8
 8000568:	601a      	str	r2, [r3, #0]
		}
		break;
 800056a:	e062      	b.n	8000632 <fsm_automatic_run+0x332>
 800056c:	20000080 	.word	0x20000080
 8000570:	20000040 	.word	0x20000040
 8000574:	200000a4 	.word	0x200000a4
 8000578:	2000003c 	.word	0x2000003c
 800057c:	200000a0 	.word	0x200000a0
 8000580:	20000044 	.word	0x20000044
	case AUTO_YELLOW_RED:
		set_amber0_red1();
 8000584:	f000 fede 	bl	8001344 <set_amber0_red1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fd85 	bl	8001098 <getFlag>
 800058e:	4603      	mov	r3, r0
 8000590:	2b01      	cmp	r3, #1
 8000592:	d12d      	bne.n	80005f0 <fsm_automatic_run+0x2f0>
			setTimer(1, 1000);
 8000594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fd29 	bl	8000ff0 <setTimer>
			count0--;
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <fsm_automatic_run+0x33c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	4a25      	ldr	r2, [pc, #148]	; (800063c <fsm_automatic_run+0x33c>)
 80005a6:	6013      	str	r3, [r2, #0]
			count1--;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <fsm_automatic_run+0x340>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a24      	ldr	r2, [pc, #144]	; (8000640 <fsm_automatic_run+0x340>)
 80005b0:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <fsm_automatic_run+0x33c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <fsm_automatic_run+0x340>)
 80005b8:	6812      	ldr	r2, [r2, #0]
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fb9d 	bl	8000cfc <setBuffer>
			if (count0 == 0) {
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <fsm_automatic_run+0x33c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d112      	bne.n	80005f0 <fsm_automatic_run+0x2f0>
				status = AUTO_RED_GREEN;
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <fsm_automatic_run+0x344>)
 80005cc:	220a      	movs	r2, #10
 80005ce:	601a      	str	r2, [r3, #0]
				count1 = greentime;						//changable
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <fsm_automatic_run+0x348>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <fsm_automatic_run+0x340>)
 80005d6:	6013      	str	r3, [r2, #0]
				count0 = redtime;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <fsm_automatic_run+0x34c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a17      	ldr	r2, [pc, #92]	; (800063c <fsm_automatic_run+0x33c>)
 80005de:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <fsm_automatic_run+0x33c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <fsm_automatic_run+0x340>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fb86 	bl	8000cfc <setBuffer>
			}
//			countdown();
		}
		if (getFlag(2)) {
 80005f0:	2002      	movs	r0, #2
 80005f2:	f000 fd51 	bl	8001098 <getFlag>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d005      	beq.n	8000608 <fsm_automatic_run+0x308>
			setTimer(2,250);
 80005fc:	21fa      	movs	r1, #250	; 0xfa
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 fcf6 	bl	8000ff0 <setTimer>
			led7seg_run();
 8000604:	f000 fb64 	bl	8000cd0 <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fe25 	bl	8000258 <isKeyPressed>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d010      	beq.n	8000636 <fsm_automatic_run+0x336>
			setTimer(1, 10000);
 8000614:	f242 7110 	movw	r1, #10000	; 0x2710
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fce9 	bl	8000ff0 <setTimer>
			status = MAN_YELLOW_RED;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <fsm_automatic_run+0x344>)
 8000620:	2209      	movs	r2, #9
 8000622:	601a      	str	r2, [r3, #0]
		}
		break;
 8000624:	e007      	b.n	8000636 <fsm_automatic_run+0x336>
	default:
		break;
 8000626:	bf00      	nop
 8000628:	e006      	b.n	8000638 <fsm_automatic_run+0x338>
		break;
 800062a:	bf00      	nop
 800062c:	e004      	b.n	8000638 <fsm_automatic_run+0x338>
		break;
 800062e:	bf00      	nop
 8000630:	e002      	b.n	8000638 <fsm_automatic_run+0x338>
		break;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <fsm_automatic_run+0x338>
		break;
 8000636:	bf00      	nop
	}


}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000a4 	.word	0x200000a4
 8000640:	200000a0 	.word	0x200000a0
 8000644:	20000080 	.word	0x20000080
 8000648:	2000003c 	.word	0x2000003c
 800064c:	20000040 	.word	0x20000040

08000650 <GreenTime>:

	int GreenTime() {
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
		return greentime;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <GreenTime+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
	}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	2000003c 	.word	0x2000003c

08000664 <AmberTime>:
	int RedTime() {
		return redtime;
	}
	int AmberTime() {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
		return ambertime;
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <AmberTime+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
	}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000044 	.word	0x20000044

08000678 <fsm_manual_run>:
#include "fsm_manual.h"
#include "global.h"
#include "fsm_automatic.h"


void fsm_manual_run() {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	switch(status) {
 800067c:	4b58      	ldr	r3, [pc, #352]	; (80007e0 <fsm_manual_run+0x168>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b06      	subs	r3, #6
 8000682:	2b03      	cmp	r3, #3
 8000684:	f200 80a0 	bhi.w	80007c8 <fsm_manual_run+0x150>
 8000688:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <fsm_manual_run+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006a1 	.word	0x080006a1
 8000694:	080006eb 	.word	0x080006eb
 8000698:	08000735 	.word	0x08000735
 800069c:	0800077f 	.word	0x0800077f
	case MAN_RED_GREEN:
		set_red0_green1();
 80006a0:	f000 fdd2 	bl	8001248 <set_red0_green1>
		if (isKeyPressed(1)) {
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fdd7 	bl	8000258 <isKeyPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <fsm_manual_run+0x3e>
			status = MAN_RED_YELLOW;
 80006b0:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <fsm_manual_run+0x168>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fcee 	bl	8001098 <getFlag>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d009      	beq.n	80006d6 <fsm_manual_run+0x5e>
			setTimer(1, GreenTime());
 80006c2:	f7ff ffc5 	bl	8000650 <GreenTime>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4619      	mov	r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 fc90 	bl	8000ff0 <setTimer>
			status = AUTO_RED_YELLOW;
 80006d0:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <fsm_manual_run+0x168>)
 80006d2:	220b      	movs	r2, #11
 80006d4:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fdbe 	bl	8000258 <isKeyPressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d074      	beq.n	80007cc <fsm_manual_run+0x154>
				status = SET_REDTIME;
 80006e2:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <fsm_manual_run+0x168>)
 80006e4:	220e      	movs	r2, #14
 80006e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80006e8:	e070      	b.n	80007cc <fsm_manual_run+0x154>

	case MAN_RED_YELLOW:
		set_red0_amber1();
 80006ea:	f000 fdd7 	bl	800129c <set_red0_amber1>
		if (isKeyPressed(1)) {
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fdb2 	bl	8000258 <isKeyPressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <fsm_manual_run+0x88>
			status = MAN_GREEN_RED;
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <fsm_manual_run+0x168>)
 80006fc:	2208      	movs	r2, #8
 80006fe:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 8000700:	2001      	movs	r0, #1
 8000702:	f000 fcc9 	bl	8001098 <getFlag>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <fsm_manual_run+0xa8>
			setTimer(1, AmberTime());
 800070c:	f7ff ffaa 	bl	8000664 <AmberTime>
 8000710:	4603      	mov	r3, r0
 8000712:	4619      	mov	r1, r3
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fc6b 	bl	8000ff0 <setTimer>
			status = AUTO_RED_YELLOW;
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <fsm_manual_run+0x168>)
 800071c:	220b      	movs	r2, #11
 800071e:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fd99 	bl	8000258 <isKeyPressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d051      	beq.n	80007d0 <fsm_manual_run+0x158>
				status = SET_REDTIME;
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <fsm_manual_run+0x168>)
 800072e:	220e      	movs	r2, #14
 8000730:	601a      	str	r2, [r3, #0]
		}
		break;
 8000732:	e04d      	b.n	80007d0 <fsm_manual_run+0x158>

	case MAN_GREEN_RED:
		set_green0_red1();
 8000734:	f000 fddc 	bl	80012f0 <set_green0_red1>
		if (isKeyPressed(1)) {
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd8d 	bl	8000258 <isKeyPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <fsm_manual_run+0xd2>
			status = MAN_YELLOW_RED;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <fsm_manual_run+0x168>)
 8000746:	2209      	movs	r2, #9
 8000748:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fca4 	bl	8001098 <getFlag>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d009      	beq.n	800076a <fsm_manual_run+0xf2>
			setTimer(1, GreenTime());
 8000756:	f7ff ff7b 	bl	8000650 <GreenTime>
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fc46 	bl	8000ff0 <setTimer>
			status = AUTO_GREEN_RED;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <fsm_manual_run+0x168>)
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff fd74 	bl	8000258 <isKeyPressed>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d02e      	beq.n	80007d4 <fsm_manual_run+0x15c>
				status = SET_REDTIME;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <fsm_manual_run+0x168>)
 8000778:	220e      	movs	r2, #14
 800077a:	601a      	str	r2, [r3, #0]
		}
		break;
 800077c:	e02a      	b.n	80007d4 <fsm_manual_run+0x15c>

	case MAN_YELLOW_RED:
		set_amber0_red1();
 800077e:	f000 fde1 	bl	8001344 <set_amber0_red1>
		if (isKeyPressed(1)) {
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff fd68 	bl	8000258 <isKeyPressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <fsm_manual_run+0x11c>
			status = MAN_RED_GREEN;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <fsm_manual_run+0x168>)
 8000790:	2206      	movs	r2, #6
 8000792:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fc7f 	bl	8001098 <getFlag>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d009      	beq.n	80007b4 <fsm_manual_run+0x13c>
			setTimer(1, AmberTime());
 80007a0:	f7ff ff60 	bl	8000664 <AmberTime>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4619      	mov	r1, r3
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fc21 	bl	8000ff0 <setTimer>
			status = AUTO_YELLOW_RED;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <fsm_manual_run+0x168>)
 80007b0:	220d      	movs	r2, #13
 80007b2:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fd4f 	bl	8000258 <isKeyPressed>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00b      	beq.n	80007d8 <fsm_manual_run+0x160>
				status = SET_REDTIME;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <fsm_manual_run+0x168>)
 80007c2:	220e      	movs	r2, #14
 80007c4:	601a      	str	r2, [r3, #0]
		}
		break;
 80007c6:	e007      	b.n	80007d8 <fsm_manual_run+0x160>
	default:
		break;
 80007c8:	bf00      	nop
 80007ca:	e006      	b.n	80007da <fsm_manual_run+0x162>
		break;
 80007cc:	bf00      	nop
 80007ce:	e004      	b.n	80007da <fsm_manual_run+0x162>
		break;
 80007d0:	bf00      	nop
 80007d2:	e002      	b.n	80007da <fsm_manual_run+0x162>
		break;
 80007d4:	bf00      	nop
 80007d6:	e000      	b.n	80007da <fsm_manual_run+0x162>
		break;
 80007d8:	bf00      	nop
	}
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000080 	.word	0x20000080

080007e4 <fsm_settings_run>:
 *  Created on: Oct 30, 2024
 *      Author: My Laptop
 */
#include <fsm_settings.h>

void fsm_settings_run () {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	switch (status) {
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <fsm_settings_run+0x68>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b10      	cmp	r3, #16
 80007ee:	d01a      	beq.n	8000826 <fsm_settings_run+0x42>
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	dc22      	bgt.n	800083a <fsm_settings_run+0x56>
 80007f4:	2b0e      	cmp	r3, #14
 80007f6:	d002      	beq.n	80007fe <fsm_settings_run+0x1a>
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d00a      	beq.n	8000812 <fsm_settings_run+0x2e>
		if (isKeyPressed(0)) {
			status = MODE0;
		}
		break;
	default:
		break;
 80007fc:	e01d      	b.n	800083a <fsm_settings_run+0x56>
		if (isKeyPressed(0)) {
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fd2a 	bl	8000258 <isKeyPressed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d019      	beq.n	800083e <fsm_settings_run+0x5a>
			status = SET_AMBERTIME;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <fsm_settings_run+0x68>)
 800080c:	220f      	movs	r2, #15
 800080e:	601a      	str	r2, [r3, #0]
		break;
 8000810:	e015      	b.n	800083e <fsm_settings_run+0x5a>
		if (isKeyPressed(0)) {
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fd20 	bl	8000258 <isKeyPressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d011      	beq.n	8000842 <fsm_settings_run+0x5e>
			status = SET_GREENTIME;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <fsm_settings_run+0x68>)
 8000820:	2210      	movs	r2, #16
 8000822:	601a      	str	r2, [r3, #0]
		break;
 8000824:	e00d      	b.n	8000842 <fsm_settings_run+0x5e>
		if (isKeyPressed(0)) {
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fd16 	bl	8000258 <isKeyPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d009      	beq.n	8000846 <fsm_settings_run+0x62>
			status = MODE0;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <fsm_settings_run+0x68>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
		break;
 8000838:	e005      	b.n	8000846 <fsm_settings_run+0x62>
		break;
 800083a:	bf00      	nop
 800083c:	e004      	b.n	8000848 <fsm_settings_run+0x64>
		break;
 800083e:	bf00      	nop
 8000840:	e002      	b.n	8000848 <fsm_settings_run+0x64>
		break;
 8000842:	bf00      	nop
 8000844:	e000      	b.n	8000848 <fsm_settings_run+0x64>
		break;
 8000846:	bf00      	nop
	}
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000080 	.word	0x20000080

08000850 <display7SEG>:
#include <global.h>

const int MAX_LED = 4;
int index_led = 0;

void display7SEG(int num){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b09      	cmp	r3, #9
 800085c:	f200 8180 	bhi.w	8000b60 <display7SEG+0x310>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <display7SEG+0x18>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	08000891 	.word	0x08000891
 800086c:	080008d9 	.word	0x080008d9
 8000870:	08000921 	.word	0x08000921
 8000874:	08000969 	.word	0x08000969
 8000878:	080009b1 	.word	0x080009b1
 800087c:	080009f9 	.word	0x080009f9
 8000880:	08000a41 	.word	0x08000a41
 8000884:	08000a89 	.word	0x08000a89
 8000888:	08000ad1 	.word	0x08000ad1
 800088c:	08000b19 	.word	0x08000b19
	switch (num) {
	case 0:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2101      	movs	r1, #1
 8000894:	48c6      	ldr	r0, [pc, #792]	; (8000bb0 <display7SEG+0x360>)
 8000896:	f001 f8a6 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2102      	movs	r1, #2
 800089e:	48c4      	ldr	r0, [pc, #784]	; (8000bb0 <display7SEG+0x360>)
 80008a0:	f001 f8a1 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2104      	movs	r1, #4
 80008a8:	48c1      	ldr	r0, [pc, #772]	; (8000bb0 <display7SEG+0x360>)
 80008aa:	f001 f89c 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	48bf      	ldr	r0, [pc, #764]	; (8000bb0 <display7SEG+0x360>)
 80008b4:	f001 f897 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	48bc      	ldr	r0, [pc, #752]	; (8000bb0 <display7SEG+0x360>)
 80008be:	f001 f892 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	48ba      	ldr	r0, [pc, #744]	; (8000bb0 <display7SEG+0x360>)
 80008c8:	f001 f88d 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	48b7      	ldr	r0, [pc, #732]	; (8000bb0 <display7SEG+0x360>)
 80008d2:	f001 f888 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 80008d6:	e167      	b.n	8000ba8 <display7SEG+0x358>
	case 1:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	48b4      	ldr	r0, [pc, #720]	; (8000bb0 <display7SEG+0x360>)
 80008de:	f001 f882 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2102      	movs	r1, #2
 80008e6:	48b2      	ldr	r0, [pc, #712]	; (8000bb0 <display7SEG+0x360>)
 80008e8:	f001 f87d 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2104      	movs	r1, #4
 80008f0:	48af      	ldr	r0, [pc, #700]	; (8000bb0 <display7SEG+0x360>)
 80008f2:	f001 f878 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2108      	movs	r1, #8
 80008fa:	48ad      	ldr	r0, [pc, #692]	; (8000bb0 <display7SEG+0x360>)
 80008fc:	f001 f873 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2110      	movs	r1, #16
 8000904:	48aa      	ldr	r0, [pc, #680]	; (8000bb0 <display7SEG+0x360>)
 8000906:	f001 f86e 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2120      	movs	r1, #32
 800090e:	48a8      	ldr	r0, [pc, #672]	; (8000bb0 <display7SEG+0x360>)
 8000910:	f001 f869 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	48a5      	ldr	r0, [pc, #660]	; (8000bb0 <display7SEG+0x360>)
 800091a:	f001 f864 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 800091e:	e143      	b.n	8000ba8 <display7SEG+0x358>
	case 2:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	48a2      	ldr	r0, [pc, #648]	; (8000bb0 <display7SEG+0x360>)
 8000926:	f001 f85e 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2102      	movs	r1, #2
 800092e:	48a0      	ldr	r0, [pc, #640]	; (8000bb0 <display7SEG+0x360>)
 8000930:	f001 f859 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2104      	movs	r1, #4
 8000938:	489d      	ldr	r0, [pc, #628]	; (8000bb0 <display7SEG+0x360>)
 800093a:	f001 f854 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	489b      	ldr	r0, [pc, #620]	; (8000bb0 <display7SEG+0x360>)
 8000944:	f001 f84f 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2110      	movs	r1, #16
 800094c:	4898      	ldr	r0, [pc, #608]	; (8000bb0 <display7SEG+0x360>)
 800094e:	f001 f84a 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2120      	movs	r1, #32
 8000956:	4896      	ldr	r0, [pc, #600]	; (8000bb0 <display7SEG+0x360>)
 8000958:	f001 f845 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	; 0x40
 8000960:	4893      	ldr	r0, [pc, #588]	; (8000bb0 <display7SEG+0x360>)
 8000962:	f001 f840 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000966:	e11f      	b.n	8000ba8 <display7SEG+0x358>
	case 3:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	4890      	ldr	r0, [pc, #576]	; (8000bb0 <display7SEG+0x360>)
 800096e:	f001 f83a 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2102      	movs	r1, #2
 8000976:	488e      	ldr	r0, [pc, #568]	; (8000bb0 <display7SEG+0x360>)
 8000978:	f001 f835 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2104      	movs	r1, #4
 8000980:	488b      	ldr	r0, [pc, #556]	; (8000bb0 <display7SEG+0x360>)
 8000982:	f001 f830 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4889      	ldr	r0, [pc, #548]	; (8000bb0 <display7SEG+0x360>)
 800098c:	f001 f82b 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	4886      	ldr	r0, [pc, #536]	; (8000bb0 <display7SEG+0x360>)
 8000996:	f001 f826 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2120      	movs	r1, #32
 800099e:	4884      	ldr	r0, [pc, #528]	; (8000bb0 <display7SEG+0x360>)
 80009a0:	f001 f821 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4881      	ldr	r0, [pc, #516]	; (8000bb0 <display7SEG+0x360>)
 80009aa:	f001 f81c 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 80009ae:	e0fb      	b.n	8000ba8 <display7SEG+0x358>
	case 4:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2101      	movs	r1, #1
 80009b4:	487e      	ldr	r0, [pc, #504]	; (8000bb0 <display7SEG+0x360>)
 80009b6:	f001 f816 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	487c      	ldr	r0, [pc, #496]	; (8000bb0 <display7SEG+0x360>)
 80009c0:	f001 f811 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	4879      	ldr	r0, [pc, #484]	; (8000bb0 <display7SEG+0x360>)
 80009ca:	f001 f80c 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	4877      	ldr	r0, [pc, #476]	; (8000bb0 <display7SEG+0x360>)
 80009d4:	f001 f807 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	4874      	ldr	r0, [pc, #464]	; (8000bb0 <display7SEG+0x360>)
 80009de:	f001 f802 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4872      	ldr	r0, [pc, #456]	; (8000bb0 <display7SEG+0x360>)
 80009e8:	f000 fffd 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	486f      	ldr	r0, [pc, #444]	; (8000bb0 <display7SEG+0x360>)
 80009f2:	f000 fff8 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 80009f6:	e0d7      	b.n	8000ba8 <display7SEG+0x358>
	case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	486c      	ldr	r0, [pc, #432]	; (8000bb0 <display7SEG+0x360>)
 80009fe:	f000 fff2 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2102      	movs	r1, #2
 8000a06:	486a      	ldr	r0, [pc, #424]	; (8000bb0 <display7SEG+0x360>)
 8000a08:	f000 ffed 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4867      	ldr	r0, [pc, #412]	; (8000bb0 <display7SEG+0x360>)
 8000a12:	f000 ffe8 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4865      	ldr	r0, [pc, #404]	; (8000bb0 <display7SEG+0x360>)
 8000a1c:	f000 ffe3 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2110      	movs	r1, #16
 8000a24:	4862      	ldr	r0, [pc, #392]	; (8000bb0 <display7SEG+0x360>)
 8000a26:	f000 ffde 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	4860      	ldr	r0, [pc, #384]	; (8000bb0 <display7SEG+0x360>)
 8000a30:	f000 ffd9 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	485d      	ldr	r0, [pc, #372]	; (8000bb0 <display7SEG+0x360>)
 8000a3a:	f000 ffd4 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000a3e:	e0b3      	b.n	8000ba8 <display7SEG+0x358>
	case 6:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	485a      	ldr	r0, [pc, #360]	; (8000bb0 <display7SEG+0x360>)
 8000a46:	f000 ffce 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4858      	ldr	r0, [pc, #352]	; (8000bb0 <display7SEG+0x360>)
 8000a50:	f000 ffc9 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2104      	movs	r1, #4
 8000a58:	4855      	ldr	r0, [pc, #340]	; (8000bb0 <display7SEG+0x360>)
 8000a5a:	f000 ffc4 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	4853      	ldr	r0, [pc, #332]	; (8000bb0 <display7SEG+0x360>)
 8000a64:	f000 ffbf 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	4850      	ldr	r0, [pc, #320]	; (8000bb0 <display7SEG+0x360>)
 8000a6e:	f000 ffba 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	484e      	ldr	r0, [pc, #312]	; (8000bb0 <display7SEG+0x360>)
 8000a78:	f000 ffb5 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	484b      	ldr	r0, [pc, #300]	; (8000bb0 <display7SEG+0x360>)
 8000a82:	f000 ffb0 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000a86:	e08f      	b.n	8000ba8 <display7SEG+0x358>
	case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4848      	ldr	r0, [pc, #288]	; (8000bb0 <display7SEG+0x360>)
 8000a8e:	f000 ffaa 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4846      	ldr	r0, [pc, #280]	; (8000bb0 <display7SEG+0x360>)
 8000a98:	f000 ffa5 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4843      	ldr	r0, [pc, #268]	; (8000bb0 <display7SEG+0x360>)
 8000aa2:	f000 ffa0 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	4841      	ldr	r0, [pc, #260]	; (8000bb0 <display7SEG+0x360>)
 8000aac:	f000 ff9b 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	483e      	ldr	r0, [pc, #248]	; (8000bb0 <display7SEG+0x360>)
 8000ab6:	f000 ff96 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2120      	movs	r1, #32
 8000abe:	483c      	ldr	r0, [pc, #240]	; (8000bb0 <display7SEG+0x360>)
 8000ac0:	f000 ff91 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	4839      	ldr	r0, [pc, #228]	; (8000bb0 <display7SEG+0x360>)
 8000aca:	f000 ff8c 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000ace:	e06b      	b.n	8000ba8 <display7SEG+0x358>
	case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4836      	ldr	r0, [pc, #216]	; (8000bb0 <display7SEG+0x360>)
 8000ad6:	f000 ff86 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2102      	movs	r1, #2
 8000ade:	4834      	ldr	r0, [pc, #208]	; (8000bb0 <display7SEG+0x360>)
 8000ae0:	f000 ff81 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <display7SEG+0x360>)
 8000aea:	f000 ff7c 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	482f      	ldr	r0, [pc, #188]	; (8000bb0 <display7SEG+0x360>)
 8000af4:	f000 ff77 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2110      	movs	r1, #16
 8000afc:	482c      	ldr	r0, [pc, #176]	; (8000bb0 <display7SEG+0x360>)
 8000afe:	f000 ff72 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <display7SEG+0x360>)
 8000b08:	f000 ff6d 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	4827      	ldr	r0, [pc, #156]	; (8000bb0 <display7SEG+0x360>)
 8000b12:	f000 ff68 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000b16:	e047      	b.n	8000ba8 <display7SEG+0x358>
	case 9:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <display7SEG+0x360>)
 8000b1e:	f000 ff62 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2102      	movs	r1, #2
 8000b26:	4822      	ldr	r0, [pc, #136]	; (8000bb0 <display7SEG+0x360>)
 8000b28:	f000 ff5d 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <display7SEG+0x360>)
 8000b32:	f000 ff58 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2108      	movs	r1, #8
 8000b3a:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <display7SEG+0x360>)
 8000b3c:	f000 ff53 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <display7SEG+0x360>)
 8000b46:	f000 ff4e 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <display7SEG+0x360>)
 8000b50:	f000 ff49 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <display7SEG+0x360>)
 8000b5a:	f000 ff44 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000b5e:	e023      	b.n	8000ba8 <display7SEG+0x358>
	default:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <display7SEG+0x360>)
 8000b66:	f000 ff3e 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <display7SEG+0x360>)
 8000b70:	f000 ff39 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2104      	movs	r1, #4
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <display7SEG+0x360>)
 8000b7a:	f000 ff34 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2108      	movs	r1, #8
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <display7SEG+0x360>)
 8000b84:	f000 ff2f 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <display7SEG+0x360>)
 8000b8e:	f000 ff2a 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2120      	movs	r1, #32
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <display7SEG+0x360>)
 8000b98:	f000 ff25 	bl	80019e6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <display7SEG+0x360>)
 8000ba2:	f000 ff20 	bl	80019e6 <HAL_GPIO_WritePin>
				break;
 8000ba6:	bf00      	nop
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <update7SEG>:
void update7SEG (int index){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d87e      	bhi.n	8000cc0 <update7SEG+0x10c>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <update7SEG+0x14>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000bd9 	.word	0x08000bd9
 8000bcc:	08000c13 	.word	0x08000c13
 8000bd0:	08000c4d 	.word	0x08000c4d
 8000bd4:	08000c87 	.word	0x08000c87
	switch (index) {
	case 0:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	483a      	ldr	r0, [pc, #232]	; (8000cc8 <update7SEG+0x114>)
 8000bde:	f000 ff02 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	4837      	ldr	r0, [pc, #220]	; (8000cc8 <update7SEG+0x114>)
 8000bea:	f000 fefc 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf4:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <update7SEG+0x114>)
 8000bf6:	f000 fef6 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c00:	4831      	ldr	r0, [pc, #196]	; (8000cc8 <update7SEG+0x114>)
 8000c02:	f000 fef0 	bl	80019e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <update7SEG+0x118>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fe20 	bl	8000850 <display7SEG>
		break;
 8000c10:	e056      	b.n	8000cc0 <update7SEG+0x10c>
	case 1:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <update7SEG+0x114>)
 8000c18:	f000 fee5 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <update7SEG+0x114>)
 8000c24:	f000 fedf 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <update7SEG+0x114>)
 8000c30:	f000 fed9 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	4823      	ldr	r0, [pc, #140]	; (8000cc8 <update7SEG+0x114>)
 8000c3c:	f000 fed3 	bl	80019e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <update7SEG+0x118>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe03 	bl	8000850 <display7SEG>
		break;
 8000c4a:	e039      	b.n	8000cc0 <update7SEG+0x10c>
	case 2:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <update7SEG+0x114>)
 8000c52:	f000 fec8 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <update7SEG+0x114>)
 8000c5e:	f000 fec2 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <update7SEG+0x114>)
 8000c6a:	f000 febc 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <update7SEG+0x114>)
 8000c76:	f000 feb6 	bl	80019e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <update7SEG+0x118>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fde6 	bl	8000850 <display7SEG>
		break;
 8000c84:	e01c      	b.n	8000cc0 <update7SEG+0x10c>
	case 3:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <update7SEG+0x114>)
 8000c8c:	f000 feab 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <update7SEG+0x114>)
 8000c98:	f000 fea5 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <update7SEG+0x114>)
 8000ca4:	f000 fe9f 	bl	80019e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <update7SEG+0x114>)
 8000cb0:	f000 fe99 	bl	80019e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <update7SEG+0x118>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fdc9 	bl	8000850 <display7SEG>
		break;
 8000cbe:	bf00      	nop
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	20000048 	.word	0x20000048

08000cd0 <led7seg_run>:
//Run every 250ms
void led7seg_run() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	if (index_led > 3) {
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <led7seg_run+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	dd02      	ble.n	8000ce2 <led7seg_run+0x12>
			index_led = 0;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <led7seg_run+0x28>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
		}
		update7SEG(index_led++);
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <led7seg_run+0x28>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	4903      	ldr	r1, [pc, #12]	; (8000cf8 <led7seg_run+0x28>)
 8000cea:	600a      	str	r2, [r1, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff61 	bl	8000bb4 <update7SEG>

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000084 	.word	0x20000084

08000cfc <setBuffer>:

void setBuffer(int led0, int led1) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led0/10;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <setBuffer+0x70>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1092      	asrs	r2, r2, #2
 8000d10:	17db      	asrs	r3, r3, #31
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <setBuffer+0x74>)
 8000d16:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led0%10;
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <setBuffer+0x70>)
 8000d1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d20:	109a      	asrs	r2, r3, #2
 8000d22:	17cb      	asrs	r3, r1, #31
 8000d24:	1ad2      	subs	r2, r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	1aca      	subs	r2, r1, r3
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <setBuffer+0x74>)
 8000d32:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led1/10;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <setBuffer+0x70>)
 8000d38:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3c:	1092      	asrs	r2, r2, #2
 8000d3e:	17db      	asrs	r3, r3, #31
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <setBuffer+0x74>)
 8000d44:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led1%10;
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <setBuffer+0x70>)
 8000d4a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d4e:	109a      	asrs	r2, r3, #2
 8000d50:	17cb      	asrs	r3, r1, #31
 8000d52:	1ad2      	subs	r2, r2, r3
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	1aca      	subs	r2, r1, r3
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <setBuffer+0x74>)
 8000d60:	60da      	str	r2, [r3, #12]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	66666667 	.word	0x66666667
 8000d70:	20000048 	.word	0x20000048

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 fb34 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f82c 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f8b2 	bl	8000ee8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d84:	f000 f864 	bl	8000e50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d88:	4810      	ldr	r0, [pc, #64]	; (8000dcc <main+0x58>)
 8000d8a:	f001 fa89 	bl	80022a0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1000);
 8000d8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f92c 	bl	8000ff0 <setTimer>
  status = MODE0;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <main+0x5c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if (getFlag(0)) {
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f97a 	bl	8001098 <getFlag>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d008      	beq.n	8000dbc <main+0x48>
		  setTimer(0,1000);
 8000daa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f91e 	bl	8000ff0 <setTimer>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000db4:	2120      	movs	r1, #32
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <main+0x60>)
 8000db8:	f000 fe2d 	bl	8001a16 <HAL_GPIO_TogglePin>
	  }
	  fsm_manual_run();
 8000dbc:	f7ff fc5c 	bl	8000678 <fsm_manual_run>
	  fsm_settings_run();
 8000dc0:	f7ff fd10 	bl	80007e4 <fsm_settings_run>
	  fsm_automatic_run();
 8000dc4:	f7ff fa9c 	bl	8000300 <fsm_automatic_run>
	  if (getFlag(0)) {
 8000dc8:	e7e9      	b.n	8000d9e <main+0x2a>
 8000dca:	bf00      	nop
 8000dcc:	200000a8 	.word	0x200000a8
 8000dd0:	20000080 	.word	0x20000080
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b090      	sub	sp, #64	; 0x40
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	2228      	movs	r2, #40	; 0x28
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fe0a 	bl	8002a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e02:	2310      	movs	r3, #16
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fe1a 	bl	8001a48 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e1a:	f000 f8e3 	bl	8000fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 f886 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e42:	f000 f8cf 	bl	8000fe4 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3740      	adds	r7, #64	; 0x40
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e84:	2209      	movs	r2, #9
 8000e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000e96:	f001 f9b3 	bl	8002200 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ea0:	f000 f8a0 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000eb2:	f001 fb31 	bl	8002518 <HAL_TIM_ConfigClockSource>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ebc:	f000 f892 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM2_Init+0x94>)
 8000ece:	f001 fd09 	bl	80028e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed8:	f000 f884 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000a8 	.word	0x200000a8

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_GPIO_Init+0xd4>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|led_red0_Pin|led_green0_Pin|led_amber0_Pin
 8000f44:	2200      	movs	r2, #0
 8000f46:	f64f 4120 	movw	r1, #64544	; 0xfc20
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <MX_GPIO_Init+0xd8>)
 8000f4c:	f000 fd4b 	bl	80019e6 <HAL_GPIO_WritePin>
                          |led_red1_Pin|led_green1_Pin|led_amber1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|enb3_Pin
 8000f50:	2200      	movs	r2, #0
 8000f52:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000f56:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <MX_GPIO_Init+0xdc>)
 8000f58:	f000 fd45 	bl	80019e6 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |enb0_Pin|enb1_Pin|enb2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8000f5c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <MX_GPIO_Init+0xe0>)
 8000f72:	f000 fba7 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin led_red0_Pin led_green0_Pin led_amber0_Pin
                           led_red1_Pin led_green1_Pin led_amber1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|led_red0_Pin|led_green0_Pin|led_amber0_Pin
 8000f76:	f64f 4320 	movw	r3, #64544	; 0xfc20
 8000f7a:	613b      	str	r3, [r7, #16]
                          |led_red1_Pin|led_green1_Pin|led_amber1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_GPIO_Init+0xd8>)
 8000f90:	f000 fb98 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin enb3_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           enb0_Pin enb1_Pin enb2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|enb3_Pin
 8000f94:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f98:	613b      	str	r3, [r7, #16]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |enb0_Pin|enb1_Pin|enb2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_GPIO_Init+0xdc>)
 8000fae:	f000 fb89 	bl	80016c4 <HAL_GPIO_Init>

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40011000 	.word	0x40011000

08000fcc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fd4:	f000 f830 	bl	8001038 <timerRun>
	getKeyInput();
 8000fd8:	f7ff f8b8 	bl	800014c <getKeyInput>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <setTimer>:
#include "software_interrupt.h"

int timer_flag[NUM_TIM];
int timer_counter[NUM_TIM];

void setTimer(int index ,int duration) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	if (index < NUM_TIM) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	dc0f      	bgt.n	8001020 <setTimer+0x30>
		timer_counter[index] = duration/TIME_CYCLE;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <setTimer+0x3c>)
 8001004:	fb82 1203 	smull	r1, r2, r2, r3
 8001008:	1092      	asrs	r2, r2, #2
 800100a:	17db      	asrs	r3, r3, #31
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <setTimer+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer_flag[index] = 0;
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <setTimer+0x44>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2100      	movs	r1, #0
 800101c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	66666667 	.word	0x66666667
 8001030:	200000f0 	.word	0x200000f0
 8001034:	200000fc 	.word	0x200000fc

08001038 <timerRun>:

void timerRun() {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIM; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	e01c      	b.n	800107e <timerRun+0x46>
		if (timer_counter[i] >= 0)
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <timerRun+0x58>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db13      	blt.n	8001078 <timerRun+0x40>
		{
			timer_counter[i] --;
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <timerRun+0x58>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <timerRun+0x58>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0)
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <timerRun+0x58>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	2b00      	cmp	r3, #0
 800106c:	dc04      	bgt.n	8001078 <timerRun+0x40>
			{
				timer_flag[i] = 1;
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <timerRun+0x5c>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2101      	movs	r1, #1
 8001074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIM; i++) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b02      	cmp	r3, #2
 8001082:	dddf      	ble.n	8001044 <timerRun+0xc>
			}
		}
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	200000f0 	.word	0x200000f0
 8001094:	200000fc 	.word	0x200000fc

08001098 <getFlag>:

int getFlag (int index) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (index < NUM_TIM) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	dc0e      	bgt.n	80010c4 <getFlag+0x2c>
		if (timer_flag[index] == 1) {
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <getFlag+0x3c>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d106      	bne.n	80010c0 <getFlag+0x28>
			timer_flag[index] = 0;
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <getFlag+0x3c>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2100      	movs	r1, #0
 80010b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e003      	b.n	80010c8 <getFlag+0x30>
		}
		return 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e001      	b.n	80010c8 <getFlag+0x30>
	}
	return -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200000fc 	.word	0x200000fc

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_MspInit+0x5c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_MspInit+0x5c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x5c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x5c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_MspInit+0x60>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_MspInit+0x60>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d113      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201c      	movs	r0, #28
 800116c:	f000 fa73 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001170:	201c      	movs	r0, #28
 8001172:	f000 fa8c 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f951 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM2_IRQHandler+0x10>)
 80011da:	f001 f8ad 	bl	8002338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000a8 	.word	0x200000a8

080011e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <set_off0_off1>:
 */

#include <traffic_light.h>
#include <led7_segment.h>
// - ways
void set_off0_off1(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <set_off0_off1+0x50>)
 8001200:	f000 fbf1 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <set_off0_off1+0x50>)
 800120c:	f000 fbeb 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <set_off0_off1+0x50>)
 8001218:	f000 fbe5 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <set_off0_off1+0x50>)
 8001224:	f000 fbdf 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <set_off0_off1+0x50>)
 8001230:	f000 fbd9 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	4802      	ldr	r0, [pc, #8]	; (8001244 <set_off0_off1+0x50>)
 800123c:	f000 fbd3 	bl	80019e6 <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010800 	.word	0x40010800

08001248 <set_red0_green1>:

void set_red0_green1(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <set_red0_green1+0x50>)
 8001254:	f000 fbc7 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <set_red0_green1+0x50>)
 8001260:	f000 fbc1 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126a:	480b      	ldr	r0, [pc, #44]	; (8001298 <set_red0_green1+0x50>)
 800126c:	f000 fbbb 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4808      	ldr	r0, [pc, #32]	; (8001298 <set_red0_green1+0x50>)
 8001278:	f000 fbb5 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <set_red0_green1+0x50>)
 8001284:	f000 fbaf 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <set_red0_green1+0x50>)
 8001290:	f000 fba9 	bl	80019e6 <HAL_GPIO_WritePin>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010800 	.word	0x40010800

0800129c <set_red0_amber1>:
void set_red0_amber1() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <set_red0_amber1+0x50>)
 80012a8:	f000 fb9d 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <set_red0_amber1+0x50>)
 80012b4:	f000 fb97 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <set_red0_amber1+0x50>)
 80012c0:	f000 fb91 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <set_red0_amber1+0x50>)
 80012cc:	f000 fb8b 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <set_red0_amber1+0x50>)
 80012d8:	f000 fb85 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <set_red0_amber1+0x50>)
 80012e4:	f000 fb7f 	bl	80019e6 <HAL_GPIO_WritePin>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40010800 	.word	0x40010800

080012f0 <set_green0_red1>:
void set_green0_red1() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <set_green0_red1+0x50>)
 80012fc:	f000 fb73 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <set_green0_red1+0x50>)
 8001308:	f000 fb6d 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <set_green0_red1+0x50>)
 8001314:	f000 fb67 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131e:	4808      	ldr	r0, [pc, #32]	; (8001340 <set_green0_red1+0x50>)
 8001320:	f000 fb61 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <set_green0_red1+0x50>)
 800132c:	f000 fb5b 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001336:	4802      	ldr	r0, [pc, #8]	; (8001340 <set_green0_red1+0x50>)
 8001338:	f000 fb55 	bl	80019e6 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010800 	.word	0x40010800

08001344 <set_amber0_red1>:
void set_amber0_red1()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <set_amber0_red1+0x50>)
 8001350:	f000 fb49 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <set_amber0_red1+0x50>)
 800135c:	f000 fb43 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <set_amber0_red1+0x50>)
 8001368:	f000 fb3d 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	4808      	ldr	r0, [pc, #32]	; (8001394 <set_amber0_red1+0x50>)
 8001374:	f000 fb37 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <set_amber0_red1+0x50>)
 8001380:	f000 fb31 	bl	80019e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <set_amber0_red1+0x50>)
 800138c:	f000 fb2b 	bl	80019e6 <HAL_GPIO_WritePin>

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff ff26 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139e:	490c      	ldr	r1, [pc, #48]	; (80013d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b4:	4c09      	ldr	r4, [pc, #36]	; (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f001 faf9 	bl	80029b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff fcd5 	bl	8000d74 <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80013d4:	08002a54 	.word	0x08002a54
  ldr r2, =_sbss
 80013d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80013dc:	2000010c 	.word	0x2000010c

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f923 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fe6a 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f93b 	bl	80016aa <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f903 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000058 	.word	0x20000058
 8001468:	20000060 	.word	0x20000060
 800146c:	2000005c 	.word	0x2000005c

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000060 	.word	0x20000060
 8001490:	20000108 	.word	0x20000108

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000108 	.word	0x20000108

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff90 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2d 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff42 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b08b      	sub	sp, #44	; 0x2c
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e148      	b.n	800196a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d8:	2201      	movs	r2, #1
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f040 8137 	bne.w	8001964 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4aa3      	ldr	r2, [pc, #652]	; (8001988 <HAL_GPIO_Init+0x2c4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d05e      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001700:	4aa1      	ldr	r2, [pc, #644]	; (8001988 <HAL_GPIO_Init+0x2c4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d875      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001706:	4aa1      	ldr	r2, [pc, #644]	; (800198c <HAL_GPIO_Init+0x2c8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d058      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 800170c:	4a9f      	ldr	r2, [pc, #636]	; (800198c <HAL_GPIO_Init+0x2c8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d86f      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001712:	4a9f      	ldr	r2, [pc, #636]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d052      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001718:	4a9d      	ldr	r2, [pc, #628]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d869      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800171e:	4a9d      	ldr	r2, [pc, #628]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d04c      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001724:	4a9b      	ldr	r2, [pc, #620]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d863      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800172a:	4a9b      	ldr	r2, [pc, #620]	; (8001998 <HAL_GPIO_Init+0x2d4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d046      	beq.n	80017be <HAL_GPIO_Init+0xfa>
 8001730:	4a99      	ldr	r2, [pc, #612]	; (8001998 <HAL_GPIO_Init+0x2d4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d85d      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d82a      	bhi.n	8001790 <HAL_GPIO_Init+0xcc>
 800173a:	2b12      	cmp	r3, #18
 800173c:	d859      	bhi.n	80017f2 <HAL_GPIO_Init+0x12e>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <HAL_GPIO_Init+0x80>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080017bf 	.word	0x080017bf
 8001748:	08001799 	.word	0x08001799
 800174c:	080017ab 	.word	0x080017ab
 8001750:	080017ed 	.word	0x080017ed
 8001754:	080017f3 	.word	0x080017f3
 8001758:	080017f3 	.word	0x080017f3
 800175c:	080017f3 	.word	0x080017f3
 8001760:	080017f3 	.word	0x080017f3
 8001764:	080017f3 	.word	0x080017f3
 8001768:	080017f3 	.word	0x080017f3
 800176c:	080017f3 	.word	0x080017f3
 8001770:	080017f3 	.word	0x080017f3
 8001774:	080017f3 	.word	0x080017f3
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017f3 	.word	0x080017f3
 8001780:	080017f3 	.word	0x080017f3
 8001784:	080017f3 	.word	0x080017f3
 8001788:	080017a1 	.word	0x080017a1
 800178c:	080017b5 	.word	0x080017b5
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <HAL_GPIO_Init+0x2d8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001796:	e02c      	b.n	80017f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e029      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	3304      	adds	r3, #4
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e024      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	3308      	adds	r3, #8
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e01f      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	330c      	adds	r3, #12
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e01a      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c6:	2304      	movs	r3, #4
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e013      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	611a      	str	r2, [r3, #16]
          break;
 80017de:	e009      	b.n	80017f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e0:	2308      	movs	r3, #8
 80017e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	615a      	str	r2, [r3, #20]
          break;
 80017ea:	e003      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x130>
          break;
 80017f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2bff      	cmp	r3, #255	; 0xff
 80017f8:	d801      	bhi.n	80017fe <HAL_GPIO_Init+0x13a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_Init+0x13e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d802      	bhi.n	8001810 <HAL_GPIO_Init+0x14c>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x152>
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	3b08      	subs	r3, #8
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	210f      	movs	r1, #15
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	6a39      	ldr	r1, [r7, #32]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	431a      	orrs	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8090 	beq.w	8001964 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001844:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_GPIO_Init+0x2dc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a55      	ldr	r2, [pc, #340]	; (80019a0 <HAL_GPIO_Init+0x2dc>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_GPIO_Init+0x2dc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800185c:	4a51      	ldr	r2, [pc, #324]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_GPIO_Init+0x2e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1e0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1dc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a47      	ldr	r2, [pc, #284]	; (80019b0 <HAL_GPIO_Init+0x2ec>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1d8>
 8001898:	2302      	movs	r3, #2
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 800189c:	2303      	movs	r3, #3
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 80018a4:	2300      	movs	r3, #0
 80018a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b6:	493b      	ldr	r1, [pc, #236]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4933      	ldr	r1, [pc, #204]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	492d      	ldr	r1, [pc, #180]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4929      	ldr	r1, [pc, #164]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4923      	ldr	r1, [pc, #140]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491f      	ldr	r1, [pc, #124]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4919      	ldr	r1, [pc, #100]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4915      	ldr	r1, [pc, #84]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 8001960:	4013      	ands	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	3301      	adds	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f aeaf 	bne.w	80016d8 <HAL_GPIO_Init+0x14>
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	372c      	adds	r7, #44	; 0x2c
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	10320000 	.word	0x10320000
 800198c:	10310000 	.word	0x10310000
 8001990:	10220000 	.word	0x10220000
 8001994:	10210000 	.word	0x10210000
 8001998:	10120000 	.word	0x10120000
 800199c:	10110000 	.word	0x10110000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010800 	.word	0x40010800
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	807b      	strh	r3, [r7, #2]
 80019f2:	4613      	mov	r3, r2
 80019f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f6:	787b      	ldrb	r3, [r7, #1]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a02:	e003      	b.n	8001a0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	611a      	str	r2, [r3, #16]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	041a      	lsls	r2, r3, #16
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	400b      	ands	r3, r1
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e26c      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d00c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d112      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
 8001a80:	4b8c      	ldr	r3, [pc, #560]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x12c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d168      	bne.n	8001b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e246      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x76>
 8001ab0:	4b80      	ldr	r3, [pc, #512]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7f      	ldr	r2, [pc, #508]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7a      	ldr	r2, [pc, #488]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0xbc>
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a71      	ldr	r2, [pc, #452]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001b04:	4b6b      	ldr	r3, [pc, #428]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a67      	ldr	r2, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fcb6 	bl	8001494 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fcb2 	bl	8001494 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1fa      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe4>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fca2 	bl	8001494 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fc9e 	bl	8001494 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1e6      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x10c>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b82:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1ba      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4939      	ldr	r1, [pc, #228]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fc57 	bl	8001494 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fc53 	bl	8001494 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e19b      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4927      	ldr	r1, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fc36 	bl	8001494 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fc32 	bl	8001494 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e17a      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03a      	beq.n	8001ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c64:	f7ff fc16 	bl	8001494 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fc12 	bl	8001494 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e15a      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 fa9a 	bl	80021c4 <RCC_Delay>
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fbfc 	bl	8001494 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fbf8 	bl	8001494 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e140      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	42420000 	.word	0x42420000
 8001cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e9      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a6 	beq.w	8001e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b97      	ldr	r3, [pc, #604]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a93      	ldr	r2, [pc, #588]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b8e      	ldr	r3, [pc, #568]	; (8001f40 <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b8b      	ldr	r3, [pc, #556]	; (8001f40 <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a8a      	ldr	r2, [pc, #552]	; (8001f40 <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fbb9 	bl	8001494 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7ff fbb5 	bl	8001494 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b64      	cmp	r3, #100	; 0x64
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0fd      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x312>
 8001d4c:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a7a      	ldr	r2, [pc, #488]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e02d      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x334>
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a72      	ldr	r2, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	e01c      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x356>
 8001d84:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a6c      	ldr	r2, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a69      	ldr	r2, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d9e:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a66      	ldr	r2, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a63      	ldr	r2, [pc, #396]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d015      	beq.n	8001dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fb69 	bl	8001494 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fb65 	bl	8001494 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0ab      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ee      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x37e>
 8001de8:	e014      	b.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fb53 	bl	8001494 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff fb4f 	bl	8001494 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e095      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ee      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8081 	beq.w	8001f32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e30:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d061      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d146      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCC_OscConfig+0x4fc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fb23 	bl	8001494 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fb1f 	bl	8001494 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e067      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d108      	bne.n	8001e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	492d      	ldr	r1, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a19      	ldr	r1, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	4927      	ldr	r1, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x4fc>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff faf3 	bl	8001494 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff faef 	bl	8001494 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e037      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x46a>
 8001ed0:	e02f      	b.n	8001f32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_RCC_OscConfig+0x4fc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fadc 	bl	8001494 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fad8 	bl	8001494 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e020      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x498>
 8001efe:	e018      	b.n	8001f32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e013      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42420060 	.word	0x42420060

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0d0      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4965      	ldr	r1, [pc, #404]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d040      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e073      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b39      	ldr	r3, [pc, #228]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4936      	ldr	r1, [pc, #216]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fa2c 	bl	8001494 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff fa28 	bl	8001494 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e053      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d210      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4922      	ldr	r1, [pc, #136]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1cc>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f98a 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40021000 	.word	0x40021000
 8002110:	08002a28 	.word	0x08002a28
 8002114:	20000058 	.word	0x20000058
 8002118:	2000005c 	.word	0x2000005c

0800211c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x30>
 8002146:	2b08      	cmp	r3, #8
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x36>
 800214a:	e027      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800214e:	613b      	str	r3, [r7, #16]
      break;
 8002150:	e027      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	0c5b      	lsrs	r3, r3, #17
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	fb02 f203 	mul.w	r2, r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e004      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	613b      	str	r3, [r7, #16]
      break;
 800219a:	e002      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	613b      	str	r3, [r7, #16]
      break;
 80021a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a2:	693b      	ldr	r3, [r7, #16]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	007a1200 	.word	0x007a1200
 80021b8:	08002a38 	.word	0x08002a38
 80021bc:	08002a48 	.word	0x08002a48
 80021c0:	003d0900 	.word	0x003d0900

080021c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <RCC_Delay+0x34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <RCC_Delay+0x38>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a5b      	lsrs	r3, r3, #9
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e0:	bf00      	nop
  }
  while (Delay --);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	60fa      	str	r2, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <RCC_Delay+0x1c>
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000058 	.word	0x20000058
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe ff88 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fa56 	bl	80026f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e035      	b.n	8002324 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_TIM_Base_Start_IT+0x90>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x4e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x4e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_TIM_Base_Start_IT+0x94>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d111      	bne.n	8002312 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d010      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	e007      	b.n	8002322 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40012c00 	.word	0x40012c00
 8002334:	40000400 	.word	0x40000400

08002338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d020      	beq.n	800239c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0202 	mvn.w	r2, #2
 800236c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f998 	bl	80026b8 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f98b 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f99a 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d020      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01b      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0204 	mvn.w	r2, #4
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f972 	bl	80026b8 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f965 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f974 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d020      	beq.n	8002434 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0208 	mvn.w	r2, #8
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2204      	movs	r2, #4
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f94c 	bl	80026b8 <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f93f 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f94e 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d020      	beq.n	8002480 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0210 	mvn.w	r2, #16
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2208      	movs	r2, #8
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f926 	bl	80026b8 <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f919 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f928 	bl	80026ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0201 	mvn.w	r2, #1
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fd94 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa6f 	bl	80029a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8f8 	bl	80026dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0220 	mvn.w	r2, #32
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa42 	bl	8002994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_TIM_ConfigClockSource+0x1c>
 8002530:	2302      	movs	r3, #2
 8002532:	e0b4      	b.n	800269e <HAL_TIM_ConfigClockSource+0x186>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800255a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256c:	d03e      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0xd4>
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002572:	f200 8087 	bhi.w	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	f000 8086 	beq.w	800268a <HAL_TIM_ConfigClockSource+0x172>
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	d87f      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d01a      	beq.n	80025be <HAL_TIM_ConfigClockSource+0xa6>
 8002588:	2b70      	cmp	r3, #112	; 0x70
 800258a:	d87b      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d050      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x11a>
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d877      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b50      	cmp	r3, #80	; 0x50
 8002596:	d03c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xfa>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d873      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d058      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x13a>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d86f      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d064      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x15a>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d86b      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d060      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d867      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05c      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d05a      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x15a>
 80025bc:	e062      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f000 f96a 	bl	80028a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	609a      	str	r2, [r3, #8]
      break;
 80025ea:	e04f      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f000 f953 	bl	80028a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260e:	609a      	str	r2, [r3, #8]
      break;
 8002610:	e03c      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8ca 	bl	80027b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2150      	movs	r1, #80	; 0x50
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f921 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002630:	e02c      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	461a      	mov	r2, r3
 8002640:	f000 f8e8 	bl	8002814 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2160      	movs	r1, #96	; 0x60
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f911 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002650:	e01c      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	f000 f8aa 	bl	80027b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2140      	movs	r1, #64	; 0x40
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f901 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002670:	e00c      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f000 f8f8 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 8002682:	e003      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e000      	b.n	800268c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800268a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <TIM_Base_SetConfig+0xc0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x28>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x28>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <TIM_Base_SetConfig+0xc4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a20      	ldr	r2, [pc, #128]	; (80027b0 <TIM_Base_SetConfig+0xc0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <TIM_Base_SetConfig+0x52>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d003      	beq.n	8002742 <TIM_Base_SetConfig+0x52>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <TIM_Base_SetConfig+0xc4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d108      	bne.n	8002754 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <TIM_Base_SetConfig+0xc0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]
  }
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40000400 	.word	0x40000400

080027b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f023 0201 	bic.w	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 030a 	bic.w	r3, r3, #10
 80027f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0210 	bic.w	r2, r3, #16
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800283e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	621a      	str	r2, [r3, #32]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	f043 0307 	orr.w	r3, r3, #7
 8002894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	609a      	str	r2, [r3, #8]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e041      	b.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d004      	beq.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d10c      	bne.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800295a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	4313      	orrs	r3, r2
 8002964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400

08002994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <__libc_init_array>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	2600      	movs	r6, #0
 80029bc:	4d0c      	ldr	r5, [pc, #48]	; (80029f0 <__libc_init_array+0x38>)
 80029be:	4c0d      	ldr	r4, [pc, #52]	; (80029f4 <__libc_init_array+0x3c>)
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	42a6      	cmp	r6, r4
 80029c6:	d109      	bne.n	80029dc <__libc_init_array+0x24>
 80029c8:	f000 f822 	bl	8002a10 <_init>
 80029cc:	2600      	movs	r6, #0
 80029ce:	4d0a      	ldr	r5, [pc, #40]	; (80029f8 <__libc_init_array+0x40>)
 80029d0:	4c0a      	ldr	r4, [pc, #40]	; (80029fc <__libc_init_array+0x44>)
 80029d2:	1b64      	subs	r4, r4, r5
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	42a6      	cmp	r6, r4
 80029d8:	d105      	bne.n	80029e6 <__libc_init_array+0x2e>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e0:	4798      	blx	r3
 80029e2:	3601      	adds	r6, #1
 80029e4:	e7ee      	b.n	80029c4 <__libc_init_array+0xc>
 80029e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ea:	4798      	blx	r3
 80029ec:	3601      	adds	r6, #1
 80029ee:	e7f2      	b.n	80029d6 <__libc_init_array+0x1e>
 80029f0:	08002a4c 	.word	0x08002a4c
 80029f4:	08002a4c 	.word	0x08002a4c
 80029f8:	08002a4c 	.word	0x08002a4c
 80029fc:	08002a50 	.word	0x08002a50

08002a00 <memset>:
 8002a00:	4603      	mov	r3, r0
 8002a02:	4402      	add	r2, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <_init>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr

08002a1c <_fini>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	bf00      	nop
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr
