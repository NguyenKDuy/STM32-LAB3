
VXL-LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c0  080030c0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080030c0  080030c0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c0  080030c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080030c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000060  08003128  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003128  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099d8  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db2  00000000  00000000  00029a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172dd  00000000  00000000  0002ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d36f  00000000  00000000  00043f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082572  00000000  00000000  00051304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a4c  00000000  00000000  000d38cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003084 	.word	0x08003084

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003084 	.word	0x08003084

0800014c <getKeyInput>:
int button_counter[NUM_BUT];
int counter[NUM_BUT] = {100,100,100};
int button_flag[NUM_BUT];


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUT; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e068      	b.n	800022a <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 8000158:	4a38      	ldr	r2, [pc, #224]	; (800023c <getKeyInput+0xf0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4937      	ldr	r1, [pc, #220]	; (8000240 <getKeyInput+0xf4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000168:	4a36      	ldr	r2, [pc, #216]	; (8000244 <getKeyInput+0xf8>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4932      	ldr	r1, [pc, #200]	; (800023c <getKeyInput+0xf0>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = isReadfrom(i);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f000 f88d 	bl	8000298 <isReadfrom>
 800017e:	4602      	mov	r2, r0
 8000180:	4930      	ldr	r1, [pc, #192]	; (8000244 <getKeyInput+0xf8>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 8000188:	4a2d      	ldr	r2, [pc, #180]	; (8000240 <getKeyInput+0xf4>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	492a      	ldr	r1, [pc, #168]	; (800023c <getKeyInput+0xf0>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000198:	429a      	cmp	r2, r3
 800019a:	d143      	bne.n	8000224 <getKeyInput+0xd8>
 800019c:	4a27      	ldr	r2, [pc, #156]	; (800023c <getKeyInput+0xf0>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4927      	ldr	r1, [pc, #156]	; (8000244 <getKeyInput+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d139      	bne.n	8000224 <getKeyInput+0xd8>
			if (KeyReg3[i] != KeyReg2[i]){
 80001b0:	4a25      	ldr	r2, [pc, #148]	; (8000248 <getKeyInput+0xfc>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4922      	ldr	r1, [pc, #136]	; (8000244 <getKeyInput+0xf8>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d01b      	beq.n	80001fc <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 80001c4:	4a1f      	ldr	r2, [pc, #124]	; (8000244 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	491e      	ldr	r1, [pc, #120]	; (8000248 <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED){
 80001d4:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <getKeyInput+0xf8>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d121      	bne.n	8000224 <getKeyInput+0xd8>
					button_counter[i] = counter[i];
 80001e0:	4a1a      	ldr	r2, [pc, #104]	; (800024c <getKeyInput+0x100>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4919      	ldr	r1, [pc, #100]	; (8000250 <getKeyInput+0x104>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					button_flag[i] = 1;
 80001f0:	4a18      	ldr	r2, [pc, #96]	; (8000254 <getKeyInput+0x108>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fa:	e013      	b.n	8000224 <getKeyInput+0xd8>
				}
			}
			else {
				button_counter[i]--;
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <getKeyInput+0x104>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000204:	1e5a      	subs	r2, r3, #1
 8000206:	4912      	ldr	r1, [pc, #72]	; (8000250 <getKeyInput+0x104>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (button_counter[i] == 0) {
 800020e:	4a10      	ldr	r2, [pc, #64]	; (8000250 <getKeyInput+0x104>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d104      	bne.n	8000224 <getKeyInput+0xd8>
					KeyReg3[i] = NORMAL;
 800021a:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <getKeyInput+0xfc>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2101      	movs	r1, #1
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUT; i++) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b02      	cmp	r3, #2
 800022e:	dd93      	ble.n	8000158 <getKeyInput+0xc>
				}
			}
		}
	}

}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000000c 	.word	0x2000000c
 8000240:	20000000 	.word	0x20000000
 8000244:	20000018 	.word	0x20000018
 8000248:	20000024 	.word	0x20000024
 800024c:	20000030 	.word	0x20000030
 8000250:	20000088 	.word	0x20000088
 8000254:	20000094 	.word	0x20000094

08000258 <isKeyPressed>:
int isKeyPressed(int index) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (index <NUM_BUT) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b02      	cmp	r3, #2
 8000264:	dc0e      	bgt.n	8000284 <isKeyPressed+0x2c>
		if (button_flag[index] == 1){
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <isKeyPressed+0x3c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d106      	bne.n	8000280 <isKeyPressed+0x28>
			button_flag[index] = 0;
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <isKeyPressed+0x3c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2100      	movs	r1, #0
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e003      	b.n	8000288 <isKeyPressed+0x30>
		}
		return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	e001      	b.n	8000288 <isKeyPressed+0x30>
	}
	return -1;
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000094 	.word	0x20000094

08000298 <isReadfrom>:



int isReadfrom (int index) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (index < NUM_BUT) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	dc21      	bgt.n	80002ea <isReadfrom+0x52>
		switch (index){
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d017      	beq.n	80002dc <isReadfrom+0x44>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	dc1d      	bgt.n	80002ee <isReadfrom+0x56>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <isReadfrom+0x28>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d007      	beq.n	80002ce <isReadfrom+0x36>
				break;
			case 2:
				return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
				break;
			default:
				break;
 80002be:	e016      	b.n	80002ee <isReadfrom+0x56>
				return HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 80002c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <isReadfrom+0x64>)
 80002c6:	f001 feb1 	bl	800202c <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	e012      	b.n	80002f4 <isReadfrom+0x5c>
				return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80002ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <isReadfrom+0x64>)
 80002d4:	f001 feaa 	bl	800202c <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	e00b      	b.n	80002f4 <isReadfrom+0x5c>
				return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e0:	4806      	ldr	r0, [pc, #24]	; (80002fc <isReadfrom+0x64>)
 80002e2:	f001 fea3 	bl	800202c <HAL_GPIO_ReadPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	e004      	b.n	80002f4 <isReadfrom+0x5c>
		}
	}
 80002ea:	bf00      	nop
 80002ec:	e000      	b.n	80002f0 <isReadfrom+0x58>
				break;
 80002ee:	bf00      	nop
	return -1;
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40011000 	.word	0x40011000

08000300 <setCount>:
#include "fsm_settings.h"

int count0, count1;
int led_buffer[4];

void setCount (int index, int value) {
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	if (index == 0) count0 = value;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d102      	bne.n	8000316 <setCount+0x16>
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <setCount+0x2c>)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	6013      	str	r3, [r2, #0]
	if (index == 1)	count1 = value;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d102      	bne.n	8000322 <setCount+0x22>
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <setCount+0x30>)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	200000b4 	.word	0x200000b4
 8000330:	200000b0 	.word	0x200000b0

08000334 <getCount>:
int getCount (int index) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	if (index ==0) return count0;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d102      	bne.n	8000348 <getCount+0x14>
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <getCount+0x30>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	e007      	b.n	8000358 <getCount+0x24>
	if (index ==1) return count1;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d102      	bne.n	8000354 <getCount+0x20>
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <getCount+0x34>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	e001      	b.n	8000358 <getCount+0x24>
	return -1;
 8000354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	200000b4 	.word	0x200000b4
 8000368:	200000b0 	.word	0x200000b0

0800036c <fsm_automatic_run>:


void fsm_automatic_run() {
 800036c:	b598      	push	{r3, r4, r7, lr}
 800036e:	af00      	add	r7, sp, #0
	switch(status){
 8000370:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <fsm_automatic_run+0x280>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	2b0c      	cmp	r3, #12
 8000378:	f200 8191 	bhi.w	800069e <fsm_automatic_run+0x332>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <fsm_automatic_run+0x18>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	080003b9 	.word	0x080003b9
 8000388:	0800069f 	.word	0x0800069f
 800038c:	0800069f 	.word	0x0800069f
 8000390:	0800069f 	.word	0x0800069f
 8000394:	0800069f 	.word	0x0800069f
 8000398:	0800069f 	.word	0x0800069f
 800039c:	0800069f 	.word	0x0800069f
 80003a0:	0800069f 	.word	0x0800069f
 80003a4:	0800069f 	.word	0x0800069f
 80003a8:	080003ff 	.word	0x080003ff
 80003ac:	080004a7 	.word	0x080004a7
 80003b0:	0800054f 	.word	0x0800054f
 80003b4:	080005f9 	.word	0x080005f9
	case MODE0:
		//TODO:
		set_off0_off1();
 80003b8:	f001 f9ae 	bl	8001718 <set_off0_off1>
		setTimer(1,1250);
 80003bc:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80003c0:	2001      	movs	r0, #1
 80003c2:	f001 f8a7 	bl	8001514 <setTimer>
		setTimer(2,250);
 80003c6:	21fa      	movs	r1, #250	; 0xfa
 80003c8:	2002      	movs	r0, #2
 80003ca:	f001 f8a3 	bl	8001514 <setTimer>
		count0 = RedTime();								//changable
 80003ce:	f000 fac5 	bl	800095c <RedTime>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a86      	ldr	r2, [pc, #536]	; (80005f0 <fsm_automatic_run+0x284>)
 80003d6:	6013      	str	r3, [r2, #0]
		count1 = GreenTime();
 80003d8:	f000 fab6 	bl	8000948 <GreenTime>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a85      	ldr	r2, [pc, #532]	; (80005f4 <fsm_automatic_run+0x288>)
 80003e0:	6013      	str	r3, [r2, #0]
		status = AUTO_RED_GREEN;
 80003e2:	4b82      	ldr	r3, [pc, #520]	; (80005ec <fsm_automatic_run+0x280>)
 80003e4:	220a      	movs	r2, #10
 80003e6:	601a      	str	r2, [r3, #0]
		setBuffer(RedTime(), GreenTime());
 80003e8:	f000 fab8 	bl	800095c <RedTime>
 80003ec:	4604      	mov	r4, r0
 80003ee:	f000 faab 	bl	8000948 <GreenTime>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4619      	mov	r1, r3
 80003f6:	4620      	mov	r0, r4
 80003f8:	f000 ff06 	bl	8001208 <setBuffer>
		break;
 80003fc:	e158      	b.n	80006b0 <fsm_automatic_run+0x344>
	case AUTO_RED_GREEN:
		set_red0_green1();
 80003fe:	f001 f9b5 	bl	800176c <set_red0_green1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 8000402:	2001      	movs	r0, #1
 8000404:	f001 f8da 	bl	80015bc <getFlag>
 8000408:	4603      	mov	r3, r0
 800040a:	2b01      	cmp	r3, #1
 800040c:	d12f      	bne.n	800046e <fsm_automatic_run+0x102>
			setTimer(1, 1000);
 800040e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000412:	2001      	movs	r0, #1
 8000414:	f001 f87e 	bl	8001514 <setTimer>
			count0--;
 8000418:	4b75      	ldr	r3, [pc, #468]	; (80005f0 <fsm_automatic_run+0x284>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
 800041e:	4a74      	ldr	r2, [pc, #464]	; (80005f0 <fsm_automatic_run+0x284>)
 8000420:	6013      	str	r3, [r2, #0]
			count1--;
 8000422:	4b74      	ldr	r3, [pc, #464]	; (80005f4 <fsm_automatic_run+0x288>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3b01      	subs	r3, #1
 8000428:	4a72      	ldr	r2, [pc, #456]	; (80005f4 <fsm_automatic_run+0x288>)
 800042a:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 800042c:	4b70      	ldr	r3, [pc, #448]	; (80005f0 <fsm_automatic_run+0x284>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a70      	ldr	r2, [pc, #448]	; (80005f4 <fsm_automatic_run+0x288>)
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	4611      	mov	r1, r2
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fee6 	bl	8001208 <setBuffer>
			if (count1 == 0) {
 800043c:	4b6d      	ldr	r3, [pc, #436]	; (80005f4 <fsm_automatic_run+0x288>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d114      	bne.n	800046e <fsm_automatic_run+0x102>
				status = AUTO_RED_YELLOW;
 8000444:	4b69      	ldr	r3, [pc, #420]	; (80005ec <fsm_automatic_run+0x280>)
 8000446:	220b      	movs	r2, #11
 8000448:	601a      	str	r2, [r3, #0]
				count1 = AmberTime();
 800044a:	f000 fa91 	bl	8000970 <AmberTime>
 800044e:	4603      	mov	r3, r0
 8000450:	4a68      	ldr	r2, [pc, #416]	; (80005f4 <fsm_automatic_run+0x288>)
 8000452:	6013      	str	r3, [r2, #0]
				count0 = AmberTime();
 8000454:	f000 fa8c 	bl	8000970 <AmberTime>
 8000458:	4603      	mov	r3, r0
 800045a:	4a65      	ldr	r2, [pc, #404]	; (80005f0 <fsm_automatic_run+0x284>)
 800045c:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 800045e:	4b64      	ldr	r3, [pc, #400]	; (80005f0 <fsm_automatic_run+0x284>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a64      	ldr	r2, [pc, #400]	; (80005f4 <fsm_automatic_run+0x288>)
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	4611      	mov	r1, r2
 8000468:	4618      	mov	r0, r3
 800046a:	f000 fecd 	bl	8001208 <setBuffer>
			}
//			countdown();
		}
		if (getFlag(2)) {
 800046e:	2002      	movs	r0, #2
 8000470:	f001 f8a4 	bl	80015bc <getFlag>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d005      	beq.n	8000486 <fsm_automatic_run+0x11a>
			setTimer(2,250);
 800047a:	21fa      	movs	r1, #250	; 0xfa
 800047c:	2002      	movs	r0, #2
 800047e:	f001 f849 	bl	8001514 <setTimer>
			led7seg_run();
 8000482:	f000 feab 	bl	80011dc <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff fee6 	bl	8000258 <isKeyPressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	f000 8107 	beq.w	80006a2 <fsm_automatic_run+0x336>
			status = MAN_RED_GREEN;
 8000494:	4b55      	ldr	r3, [pc, #340]	; (80005ec <fsm_automatic_run+0x280>)
 8000496:	2206      	movs	r2, #6
 8000498:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 800049a:	f242 7110 	movw	r1, #10000	; 0x2710
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 f838 	bl	8001514 <setTimer>
		}
		break;
 80004a4:	e0fd      	b.n	80006a2 <fsm_automatic_run+0x336>
	case AUTO_RED_YELLOW:
		set_red0_amber1();
 80004a6:	f001 f98b 	bl	80017c0 <set_red0_amber1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 f886 	bl	80015bc <getFlag>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d12f      	bne.n	8000516 <fsm_automatic_run+0x1aa>
			setTimer(1, 1000);
 80004b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004ba:	2001      	movs	r0, #1
 80004bc:	f001 f82a 	bl	8001514 <setTimer>
			count0--;
 80004c0:	4b4b      	ldr	r3, [pc, #300]	; (80005f0 <fsm_automatic_run+0x284>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	4a4a      	ldr	r2, [pc, #296]	; (80005f0 <fsm_automatic_run+0x284>)
 80004c8:	6013      	str	r3, [r2, #0]
			count1--;
 80004ca:	4b4a      	ldr	r3, [pc, #296]	; (80005f4 <fsm_automatic_run+0x288>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	4a48      	ldr	r2, [pc, #288]	; (80005f4 <fsm_automatic_run+0x288>)
 80004d2:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 80004d4:	4b46      	ldr	r3, [pc, #280]	; (80005f0 <fsm_automatic_run+0x284>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a46      	ldr	r2, [pc, #280]	; (80005f4 <fsm_automatic_run+0x288>)
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fe92 	bl	8001208 <setBuffer>
			if (count1 == 0) {
 80004e4:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <fsm_automatic_run+0x288>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d114      	bne.n	8000516 <fsm_automatic_run+0x1aa>
				status = AUTO_GREEN_RED;
 80004ec:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <fsm_automatic_run+0x280>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
				count0 = GreenTime();						//changable
 80004f2:	f000 fa29 	bl	8000948 <GreenTime>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a3d      	ldr	r2, [pc, #244]	; (80005f0 <fsm_automatic_run+0x284>)
 80004fa:	6013      	str	r3, [r2, #0]
				count1 = RedTime();
 80004fc:	f000 fa2e 	bl	800095c <RedTime>
 8000500:	4603      	mov	r3, r0
 8000502:	4a3c      	ldr	r2, [pc, #240]	; (80005f4 <fsm_automatic_run+0x288>)
 8000504:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 8000506:	4b3a      	ldr	r3, [pc, #232]	; (80005f0 <fsm_automatic_run+0x284>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a3a      	ldr	r2, [pc, #232]	; (80005f4 <fsm_automatic_run+0x288>)
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fe79 	bl	8001208 <setBuffer>

			}
//			countdown();
		}
		if (getFlag(2)) {
 8000516:	2002      	movs	r0, #2
 8000518:	f001 f850 	bl	80015bc <getFlag>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d005      	beq.n	800052e <fsm_automatic_run+0x1c2>
			setTimer(2,250);
 8000522:	21fa      	movs	r1, #250	; 0xfa
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fff5 	bl	8001514 <setTimer>
			led7seg_run();
 800052a:	f000 fe57 	bl	80011dc <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff fe92 	bl	8000258 <isKeyPressed>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 80b5 	beq.w	80006a6 <fsm_automatic_run+0x33a>
			setTimer(1, 10000);
 800053c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000540:	2001      	movs	r0, #1
 8000542:	f000 ffe7 	bl	8001514 <setTimer>
			status = MAN_RED_YELLOW;
 8000546:	4b29      	ldr	r3, [pc, #164]	; (80005ec <fsm_automatic_run+0x280>)
 8000548:	2207      	movs	r2, #7
 800054a:	601a      	str	r2, [r3, #0]
		}
		break;
 800054c:	e0ab      	b.n	80006a6 <fsm_automatic_run+0x33a>
	case AUTO_GREEN_RED:
		set_green0_red1();
 800054e:	f001 f961 	bl	8001814 <set_green0_red1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 8000552:	2001      	movs	r0, #1
 8000554:	f001 f832 	bl	80015bc <getFlag>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d12a      	bne.n	80005b4 <fsm_automatic_run+0x248>
			setTimer(1, 1000);
 800055e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000562:	2001      	movs	r0, #1
 8000564:	f000 ffd6 	bl	8001514 <setTimer>
			count0--;
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <fsm_automatic_run+0x284>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <fsm_automatic_run+0x284>)
 8000570:	6013      	str	r3, [r2, #0]
			count1--;
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <fsm_automatic_run+0x288>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <fsm_automatic_run+0x288>)
 800057a:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <fsm_automatic_run+0x284>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <fsm_automatic_run+0x288>)
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fe3e 	bl	8001208 <setBuffer>
			if (count0 == 0) {
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <fsm_automatic_run+0x284>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10f      	bne.n	80005b4 <fsm_automatic_run+0x248>
				status = AUTO_YELLOW_RED;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <fsm_automatic_run+0x280>)
 8000596:	220d      	movs	r2, #13
 8000598:	601a      	str	r2, [r3, #0]
				count0 = AmberTime();						//changable
 800059a:	f000 f9e9 	bl	8000970 <AmberTime>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <fsm_automatic_run+0x284>)
 80005a2:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <fsm_automatic_run+0x284>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <fsm_automatic_run+0x288>)
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fe2a 	bl	8001208 <setBuffer>
			}
//			countdown();
		}
		if (getFlag(2)) {
 80005b4:	2002      	movs	r0, #2
 80005b6:	f001 f801 	bl	80015bc <getFlag>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d005      	beq.n	80005cc <fsm_automatic_run+0x260>
			setTimer(2,250);
 80005c0:	21fa      	movs	r1, #250	; 0xfa
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 ffa6 	bl	8001514 <setTimer>
			led7seg_run();
 80005c8:	f000 fe08 	bl	80011dc <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fe43 	bl	8000258 <isKeyPressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d068      	beq.n	80006aa <fsm_automatic_run+0x33e>
			setTimer(1, 10000);
 80005d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 ff99 	bl	8001514 <setTimer>
			status = MAN_GREEN_RED;
 80005e2:	4b02      	ldr	r3, [pc, #8]	; (80005ec <fsm_automatic_run+0x280>)
 80005e4:	2208      	movs	r2, #8
 80005e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80005e8:	e05f      	b.n	80006aa <fsm_automatic_run+0x33e>
 80005ea:	bf00      	nop
 80005ec:	20000080 	.word	0x20000080
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	200000b0 	.word	0x200000b0
	case AUTO_YELLOW_RED:
		set_amber0_red1();
 80005f8:	f001 f936 	bl	8001868 <set_amber0_red1>
		//auto switch to the next light if finish count
		if (getFlag(1) == 1) {
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 ffdd 	bl	80015bc <getFlag>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d12f      	bne.n	8000668 <fsm_automatic_run+0x2fc>
			setTimer(1, 1000);
 8000608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800060c:	2001      	movs	r0, #1
 800060e:	f000 ff81 	bl	8001514 <setTimer>
			count0--;
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <fsm_automatic_run+0x348>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <fsm_automatic_run+0x348>)
 800061a:	6013      	str	r3, [r2, #0]
			count1--;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <fsm_automatic_run+0x34c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3b01      	subs	r3, #1
 8000622:	4a25      	ldr	r2, [pc, #148]	; (80006b8 <fsm_automatic_run+0x34c>)
 8000624:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <fsm_automatic_run+0x348>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <fsm_automatic_run+0x34c>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fde9 	bl	8001208 <setBuffer>
			if (count0 == 0) {
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <fsm_automatic_run+0x348>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d114      	bne.n	8000668 <fsm_automatic_run+0x2fc>
				status = AUTO_RED_GREEN;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <fsm_automatic_run+0x350>)
 8000640:	220a      	movs	r2, #10
 8000642:	601a      	str	r2, [r3, #0]
				count1 = GreenTime();						//changable
 8000644:	f000 f980 	bl	8000948 <GreenTime>
 8000648:	4603      	mov	r3, r0
 800064a:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <fsm_automatic_run+0x34c>)
 800064c:	6013      	str	r3, [r2, #0]
				count0 = RedTime();
 800064e:	f000 f985 	bl	800095c <RedTime>
 8000652:	4603      	mov	r3, r0
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <fsm_automatic_run+0x348>)
 8000656:	6013      	str	r3, [r2, #0]
				setBuffer(count0, count1);
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <fsm_automatic_run+0x348>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <fsm_automatic_run+0x34c>)
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fdd0 	bl	8001208 <setBuffer>
			}
//			countdown();
		}
		if (getFlag(2)) {
 8000668:	2002      	movs	r0, #2
 800066a:	f000 ffa7 	bl	80015bc <getFlag>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <fsm_automatic_run+0x314>
			setTimer(2,250);
 8000674:	21fa      	movs	r1, #250	; 0xfa
 8000676:	2002      	movs	r0, #2
 8000678:	f000 ff4c 	bl	8001514 <setTimer>
			led7seg_run();
 800067c:	f000 fdae 	bl	80011dc <led7seg_run>
		}
		//handle mode manual
		if (isKeyPressed(0)) {
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fde9 	bl	8000258 <isKeyPressed>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d010      	beq.n	80006ae <fsm_automatic_run+0x342>
			setTimer(1, 10000);
 800068c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000690:	2001      	movs	r0, #1
 8000692:	f000 ff3f 	bl	8001514 <setTimer>
			status = MAN_YELLOW_RED;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <fsm_automatic_run+0x350>)
 8000698:	2209      	movs	r2, #9
 800069a:	601a      	str	r2, [r3, #0]
		}
		break;
 800069c:	e007      	b.n	80006ae <fsm_automatic_run+0x342>
	default:
		break;
 800069e:	bf00      	nop
 80006a0:	e006      	b.n	80006b0 <fsm_automatic_run+0x344>
		break;
 80006a2:	bf00      	nop
 80006a4:	e004      	b.n	80006b0 <fsm_automatic_run+0x344>
		break;
 80006a6:	bf00      	nop
 80006a8:	e002      	b.n	80006b0 <fsm_automatic_run+0x344>
		break;
 80006aa:	bf00      	nop
 80006ac:	e000      	b.n	80006b0 <fsm_automatic_run+0x344>
		break;
 80006ae:	bf00      	nop
	}


}
 80006b0:	bf00      	nop
 80006b2:	bd98      	pop	{r3, r4, r7, pc}
 80006b4:	200000b4 	.word	0x200000b4
 80006b8:	200000b0 	.word	0x200000b0
 80006bc:	20000080 	.word	0x20000080

080006c0 <fsm_manual_run>:
#include "fsm_manual.h"
#include "fsm_automatic.h"
#include "fsm_settings.h"


void fsm_manual_run() {
 80006c0:	b598      	push	{r3, r4, r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	switch(status) {
 80006c4:	4b9f      	ldr	r3, [pc, #636]	; (8000944 <fsm_manual_run+0x284>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3b06      	subs	r3, #6
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	f200 812f 	bhi.w	800092e <fsm_manual_run+0x26e>
 80006d0:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <fsm_manual_run+0x18>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	080006e9 	.word	0x080006e9
 80006dc:	08000777 	.word	0x08000777
 80006e0:	08000805 	.word	0x08000805
 80006e4:	08000891 	.word	0x08000891
	case MAN_RED_GREEN:
		set_red0_green1();
 80006e8:	f001 f840 	bl	800176c <set_red0_green1>
		update7SEG(4); // Turn off all led
 80006ec:	2004      	movs	r0, #4
 80006ee:	f000 fccf 	bl	8001090 <update7SEG>
		if (isKeyPressed(1)) {
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fdb0 	bl	8000258 <isKeyPressed>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <fsm_manual_run+0x44>
			status = MAN_RED_YELLOW;
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <fsm_manual_run+0x284>)
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 8000704:	2001      	movs	r0, #1
 8000706:	f000 ff59 	bl	80015bc <getFlag>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d027      	beq.n	8000760 <fsm_manual_run+0xa0>
			setCount(0, RedTime());
 8000710:	f000 f924 	bl	800095c <RedTime>
 8000714:	4603      	mov	r3, r0
 8000716:	4619      	mov	r1, r3
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff fdf1 	bl	8000300 <setCount>
			setCount(1, GreenTime());
 800071e:	f000 f913 	bl	8000948 <GreenTime>
 8000722:	4603      	mov	r3, r0
 8000724:	4619      	mov	r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fdea 	bl	8000300 <setCount>
			setBuffer(getCount(0), getCount(1));
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fe01 	bl	8000334 <getCount>
 8000732:	4604      	mov	r4, r0
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff fdfd 	bl	8000334 <getCount>
 800073a:	4603      	mov	r3, r0
 800073c:	4619      	mov	r1, r3
 800073e:	4620      	mov	r0, r4
 8000740:	f000 fd62 	bl	8001208 <setBuffer>
			setTimer(1,1250);
 8000744:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fee3 	bl	8001514 <setTimer>
			setTimer(2,250);
 800074e:	21fa      	movs	r1, #250	; 0xfa
 8000750:	2002      	movs	r0, #2
 8000752:	f000 fedf 	bl	8001514 <setTimer>
			countAgain();
 8000756:	f000 fd93 	bl	8001280 <countAgain>
			status = AUTO_RED_YELLOW;
 800075a:	4b7a      	ldr	r3, [pc, #488]	; (8000944 <fsm_manual_run+0x284>)
 800075c:	220b      	movs	r2, #11
 800075e:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff fd79 	bl	8000258 <isKeyPressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	f000 80e2 	beq.w	8000932 <fsm_manual_run+0x272>
				status = SET_REDTIME;
 800076e:	4b75      	ldr	r3, [pc, #468]	; (8000944 <fsm_manual_run+0x284>)
 8000770:	220e      	movs	r2, #14
 8000772:	601a      	str	r2, [r3, #0]
		}
		break;
 8000774:	e0dd      	b.n	8000932 <fsm_manual_run+0x272>

	case MAN_RED_YELLOW:
		set_red0_amber1();
 8000776:	f001 f823 	bl	80017c0 <set_red0_amber1>
		update7SEG(4); // Turn off all led
 800077a:	2004      	movs	r0, #4
 800077c:	f000 fc88 	bl	8001090 <update7SEG>
		if (isKeyPressed(1)) {
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fd69 	bl	8000258 <isKeyPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <fsm_manual_run+0xd2>
			status = MAN_GREEN_RED;
 800078c:	4b6d      	ldr	r3, [pc, #436]	; (8000944 <fsm_manual_run+0x284>)
 800078e:	2208      	movs	r2, #8
 8000790:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 8000792:	2001      	movs	r0, #1
 8000794:	f000 ff12 	bl	80015bc <getFlag>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d027      	beq.n	80007ee <fsm_manual_run+0x12e>
			setCount(0, AmberTime());
 800079e:	f000 f8e7 	bl	8000970 <AmberTime>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4619      	mov	r1, r3
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fdaa 	bl	8000300 <setCount>
			setCount(1, AmberTime());
 80007ac:	f000 f8e0 	bl	8000970 <AmberTime>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4619      	mov	r1, r3
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fda3 	bl	8000300 <setCount>
			setBuffer(getCount(0), getCount(1));
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff fdba 	bl	8000334 <getCount>
 80007c0:	4604      	mov	r4, r0
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fdb6 	bl	8000334 <getCount>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4619      	mov	r1, r3
 80007cc:	4620      	mov	r0, r4
 80007ce:	f000 fd1b 	bl	8001208 <setBuffer>
			setTimer(1,1250);
 80007d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 fe9c 	bl	8001514 <setTimer>
			setTimer(2,250);
 80007dc:	21fa      	movs	r1, #250	; 0xfa
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 fe98 	bl	8001514 <setTimer>
			countAgain();
 80007e4:	f000 fd4c 	bl	8001280 <countAgain>
			status = AUTO_RED_YELLOW;
 80007e8:	4b56      	ldr	r3, [pc, #344]	; (8000944 <fsm_manual_run+0x284>)
 80007ea:	220b      	movs	r2, #11
 80007ec:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fd32 	bl	8000258 <isKeyPressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 809d 	beq.w	8000936 <fsm_manual_run+0x276>
				status = SET_REDTIME;
 80007fc:	4b51      	ldr	r3, [pc, #324]	; (8000944 <fsm_manual_run+0x284>)
 80007fe:	220e      	movs	r2, #14
 8000800:	601a      	str	r2, [r3, #0]
		}
		break;
 8000802:	e098      	b.n	8000936 <fsm_manual_run+0x276>

	case MAN_GREEN_RED:
		set_green0_red1();
 8000804:	f001 f806 	bl	8001814 <set_green0_red1>
		update7SEG(4); // Turn off all led
 8000808:	2004      	movs	r0, #4
 800080a:	f000 fc41 	bl	8001090 <update7SEG>
		if (isKeyPressed(1)) {
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fd22 	bl	8000258 <isKeyPressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <fsm_manual_run+0x160>
			status = MAN_YELLOW_RED;
 800081a:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <fsm_manual_run+0x284>)
 800081c:	2209      	movs	r2, #9
 800081e:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fecb 	bl	80015bc <getFlag>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d027      	beq.n	800087c <fsm_manual_run+0x1bc>
			setCount(0, GreenTime());
 800082c:	f000 f88c 	bl	8000948 <GreenTime>
 8000830:	4603      	mov	r3, r0
 8000832:	4619      	mov	r1, r3
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fd63 	bl	8000300 <setCount>
			setCount(1, RedTime());
 800083a:	f000 f88f 	bl	800095c <RedTime>
 800083e:	4603      	mov	r3, r0
 8000840:	4619      	mov	r1, r3
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fd5c 	bl	8000300 <setCount>
			setBuffer(getCount(0), getCount(1));
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fd73 	bl	8000334 <getCount>
 800084e:	4604      	mov	r4, r0
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fd6f 	bl	8000334 <getCount>
 8000856:	4603      	mov	r3, r0
 8000858:	4619      	mov	r1, r3
 800085a:	4620      	mov	r0, r4
 800085c:	f000 fcd4 	bl	8001208 <setBuffer>
			setTimer(1,1250);
 8000860:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fe55 	bl	8001514 <setTimer>
			setTimer(2,250);
 800086a:	21fa      	movs	r1, #250	; 0xfa
 800086c:	2002      	movs	r0, #2
 800086e:	f000 fe51 	bl	8001514 <setTimer>
			countAgain();
 8000872:	f000 fd05 	bl	8001280 <countAgain>
			status = AUTO_GREEN_RED;
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <fsm_manual_run+0x284>)
 8000878:	220c      	movs	r2, #12
 800087a:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fceb 	bl	8000258 <isKeyPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d058      	beq.n	800093a <fsm_manual_run+0x27a>
				status = SET_REDTIME;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <fsm_manual_run+0x284>)
 800088a:	220e      	movs	r2, #14
 800088c:	601a      	str	r2, [r3, #0]
		}
		break;
 800088e:	e054      	b.n	800093a <fsm_manual_run+0x27a>

	case MAN_YELLOW_RED:
		set_amber0_red1();
 8000890:	f000 ffea 	bl	8001868 <set_amber0_red1>
		update7SEG(4); // Turn off all led
 8000894:	2004      	movs	r0, #4
 8000896:	f000 fbfb 	bl	8001090 <update7SEG>
		if (isKeyPressed(1)) {
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fcdc 	bl	8000258 <isKeyPressed>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <fsm_manual_run+0x1ec>
			status = MAN_RED_GREEN;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <fsm_manual_run+0x284>)
 80008a8:	2206      	movs	r2, #6
 80008aa:	601a      	str	r2, [r3, #0]
		}
		if (getFlag(1)) {
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fe85 	bl	80015bc <getFlag>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d027      	beq.n	8000908 <fsm_manual_run+0x248>
			setCount(0, AmberTime());
 80008b8:	f000 f85a 	bl	8000970 <AmberTime>
 80008bc:	4603      	mov	r3, r0
 80008be:	4619      	mov	r1, r3
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fd1d 	bl	8000300 <setCount>
			setCount(1, AmberTime());
 80008c6:	f000 f853 	bl	8000970 <AmberTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4619      	mov	r1, r3
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fd16 	bl	8000300 <setCount>
			setBuffer(getCount(0), getCount(1));
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fd2d 	bl	8000334 <getCount>
 80008da:	4604      	mov	r4, r0
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fd29 	bl	8000334 <getCount>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4620      	mov	r0, r4
 80008e8:	f000 fc8e 	bl	8001208 <setBuffer>
			setTimer(1,1250);
 80008ec:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 fe0f 	bl	8001514 <setTimer>
			setTimer(2,250);
 80008f6:	21fa      	movs	r1, #250	; 0xfa
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 fe0b 	bl	8001514 <setTimer>
			countAgain();
 80008fe:	f000 fcbf 	bl	8001280 <countAgain>
			status = AUTO_YELLOW_RED;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <fsm_manual_run+0x284>)
 8000904:	220d      	movs	r2, #13
 8000906:	601a      	str	r2, [r3, #0]
		}
		if (isKeyPressed(0)) {
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fca5 	bl	8000258 <isKeyPressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d014      	beq.n	800093e <fsm_manual_run+0x27e>
			status = SET_REDTIME;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <fsm_manual_run+0x284>)
 8000916:	220e      	movs	r2, #14
 8000918:	601a      	str	r2, [r3, #0]
			setTimer(2,250);
 800091a:	21fa      	movs	r1, #250	; 0xfa
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fdf9 	bl	8001514 <setTimer>
			setTimer(1,10000);
 8000922:	f242 7110 	movw	r1, #10000	; 0x2710
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fdf4 	bl	8001514 <setTimer>
		}
		break;
 800092c:	e007      	b.n	800093e <fsm_manual_run+0x27e>
	default:
		break;
 800092e:	bf00      	nop
 8000930:	e006      	b.n	8000940 <fsm_manual_run+0x280>
		break;
 8000932:	bf00      	nop
 8000934:	e004      	b.n	8000940 <fsm_manual_run+0x280>
		break;
 8000936:	bf00      	nop
 8000938:	e002      	b.n	8000940 <fsm_manual_run+0x280>
		break;
 800093a:	bf00      	nop
 800093c:	e000      	b.n	8000940 <fsm_manual_run+0x280>
		break;
 800093e:	bf00      	nop
	}
}
 8000940:	bf00      	nop
 8000942:	bd98      	pop	{r3, r4, r7, pc}
 8000944:	20000080 	.word	0x20000080

08000948 <GreenTime>:

int tmp_greentime = 92;
int tmp_redtime = 98;
int tmp_ambertime = 6;

int GreenTime() {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	return greentime;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <GreenTime+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	2000003c 	.word	0x2000003c

0800095c <RedTime>:
int RedTime() {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	return redtime;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <RedTime+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000040 	.word	0x20000040

08000970 <AmberTime>:
int AmberTime() {
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return ambertime;
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <AmberTime+0x10>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000044 	.word	0x20000044

08000984 <fsm_settings_run>:
}
void setAmberTime(int value){
	ambertime = value;
}

void fsm_settings_run () {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	switch (status) {
 8000988:	4bad      	ldr	r3, [pc, #692]	; (8000c40 <fsm_settings_run+0x2bc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b10      	cmp	r3, #16
 800098e:	f000 812a 	beq.w	8000be6 <fsm_settings_run+0x262>
 8000992:	2b10      	cmp	r3, #16
 8000994:	f300 81b5 	bgt.w	8000d02 <fsm_settings_run+0x37e>
 8000998:	2b0e      	cmp	r3, #14
 800099a:	d003      	beq.n	80009a4 <fsm_settings_run+0x20>
 800099c:	2b0f      	cmp	r3, #15
 800099e:	f000 8096 	beq.w	8000ace <fsm_settings_run+0x14a>
				toggle = 0;
			}
		}
		break;
	default:
		break;
 80009a2:	e1ae      	b.n	8000d02 <fsm_settings_run+0x37e>
		setBuffer(tmp_redtime, 2);
 80009a4:	4ba7      	ldr	r3, [pc, #668]	; (8000c44 <fsm_settings_run+0x2c0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fc2c 	bl	8001208 <setBuffer>
		if (isKeyPressed(0)) {
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fc51 	bl	8000258 <isKeyPressed>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00c      	beq.n	80009d6 <fsm_settings_run+0x52>
			setTimer(1,10000);
 80009bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 fda7 	bl	8001514 <setTimer>
			status = SET_AMBERTIME;
 80009c6:	4b9e      	ldr	r3, [pc, #632]	; (8000c40 <fsm_settings_run+0x2bc>)
 80009c8:	220f      	movs	r2, #15
 80009ca:	601a      	str	r2, [r3, #0]
			toggle = 0;
 80009cc:	4b9e      	ldr	r3, [pc, #632]	; (8000c48 <fsm_settings_run+0x2c4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
			countAgain();
 80009d2:	f000 fc55 	bl	8001280 <countAgain>
		if (isKeyPressed(1)) {
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff fc3e 	bl	8000258 <isKeyPressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d015      	beq.n	8000a0e <fsm_settings_run+0x8a>
			setTimer(1,10000);
 80009e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80009e6:	2001      	movs	r0, #1
 80009e8:	f000 fd94 	bl	8001514 <setTimer>
			tmp_redtime = (tmp_redtime + 1 > 99) ? 0 : tmp_redtime + 1;
 80009ec:	4b95      	ldr	r3, [pc, #596]	; (8000c44 <fsm_settings_run+0x2c0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b62      	cmp	r3, #98	; 0x62
 80009f2:	dc03      	bgt.n	80009fc <fsm_settings_run+0x78>
 80009f4:	4b93      	ldr	r3, [pc, #588]	; (8000c44 <fsm_settings_run+0x2c0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	e000      	b.n	80009fe <fsm_settings_run+0x7a>
 80009fc:	2300      	movs	r3, #0
 80009fe:	4a91      	ldr	r2, [pc, #580]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000a00:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_redtime, 2);
 8000a02:	4b90      	ldr	r3, [pc, #576]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fbfd 	bl	8001208 <setBuffer>
		if (isKeyPressed(2)) {
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fc22 	bl	8000258 <isKeyPressed>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d02a      	beq.n	8000a70 <fsm_settings_run+0xec>
			setTimer(1,10000);
 8000a1a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f000 fd78 	bl	8001514 <setTimer>
			redtime = (tmp_redtime - ambertime < 0) ? redtime : tmp_redtime;
 8000a24:	4b87      	ldr	r3, [pc, #540]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b88      	ldr	r3, [pc, #544]	; (8000c4c <fsm_settings_run+0x2c8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da02      	bge.n	8000a38 <fsm_settings_run+0xb4>
 8000a32:	4b87      	ldr	r3, [pc, #540]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	e001      	b.n	8000a3c <fsm_settings_run+0xb8>
 8000a38:	4b82      	ldr	r3, [pc, #520]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a84      	ldr	r2, [pc, #528]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000a3e:	6013      	str	r3, [r2, #0]
			tmp_redtime = (redtime == tmp_ambertime) ? tmp_redtime : redtime;
 8000a40:	4b83      	ldr	r3, [pc, #524]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b83      	ldr	r3, [pc, #524]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d102      	bne.n	8000a52 <fsm_settings_run+0xce>
 8000a4c:	4b7d      	ldr	r3, [pc, #500]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	e001      	b.n	8000a56 <fsm_settings_run+0xd2>
 8000a52:	4b7f      	ldr	r3, [pc, #508]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a7b      	ldr	r2, [pc, #492]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000a58:	6013      	str	r3, [r2, #0]
			greentime = (redtime - ambertime);
 8000a5a:	4b7d      	ldr	r3, [pc, #500]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <fsm_settings_run+0x2c8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a7c      	ldr	r2, [pc, #496]	; (8000c58 <fsm_settings_run+0x2d4>)
 8000a66:	6013      	str	r3, [r2, #0]
			tmp_greentime = greentime;
 8000a68:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <fsm_settings_run+0x2d4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a7b      	ldr	r2, [pc, #492]	; (8000c5c <fsm_settings_run+0x2d8>)
 8000a6e:	6013      	str	r3, [r2, #0]
		if (getFlag(2)) {
 8000a70:	2002      	movs	r0, #2
 8000a72:	f000 fda3 	bl	80015bc <getFlag>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d018      	beq.n	8000aae <fsm_settings_run+0x12a>
			setTimer(2,250);
 8000a7c:	21fa      	movs	r1, #250	; 0xfa
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f000 fd48 	bl	8001514 <setTimer>
			led7seg_run();
 8000a84:	f000 fbaa 	bl	80011dc <led7seg_run>
			if (!(toggle++)) setallRed();
 8000a88:	4b6f      	ldr	r3, [pc, #444]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	496e      	ldr	r1, [pc, #440]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000a90:	600a      	str	r2, [r1, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <fsm_settings_run+0x118>
 8000a96:	f000 ff11 	bl	80018bc <setallRed>
 8000a9a:	e008      	b.n	8000aae <fsm_settings_run+0x12a>
			else if (toggle) {
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d004      	beq.n	8000aae <fsm_settings_run+0x12a>
				setallOff();
 8000aa4:	f000 ff88 	bl	80019b8 <setallOff>
				toggle = 0;
 8000aa8:	4b67      	ldr	r3, [pc, #412]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		if (getFlag(1)) {
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 fd84 	bl	80015bc <getFlag>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8125 	beq.w	8000d06 <fsm_settings_run+0x382>
			toggle = 0;
 8000abc:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
			status = MODE0;
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <fsm_settings_run+0x2bc>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
			countAgain();
 8000ac8:	f000 fbda 	bl	8001280 <countAgain>
		break;
 8000acc:	e11b      	b.n	8000d06 <fsm_settings_run+0x382>
		setBuffer(tmp_ambertime, 3);
 8000ace:	4b61      	ldr	r3, [pc, #388]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fb97 	bl	8001208 <setBuffer>
		if (isKeyPressed(0)) {
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fbbc 	bl	8000258 <isKeyPressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00c      	beq.n	8000b00 <fsm_settings_run+0x17c>
			status = SET_GREENTIME;
 8000ae6:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <fsm_settings_run+0x2bc>)
 8000ae8:	2210      	movs	r2, #16
 8000aea:	601a      	str	r2, [r3, #0]
			setTimer(1,10000);
 8000aec:	f242 7110 	movw	r1, #10000	; 0x2710
 8000af0:	2001      	movs	r0, #1
 8000af2:	f000 fd0f 	bl	8001514 <setTimer>
			toggle = 0;
 8000af6:	4b54      	ldr	r3, [pc, #336]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
			countAgain();
 8000afc:	f000 fbc0 	bl	8001280 <countAgain>
		if (isKeyPressed(1)) {
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff fba9 	bl	8000258 <isKeyPressed>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d015      	beq.n	8000b38 <fsm_settings_run+0x1b4>
			setTimer(1,10000);
 8000b0c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fcff 	bl	8001514 <setTimer>
			tmp_ambertime = (tmp_ambertime + 1 > 99) ? 0 : tmp_ambertime + 1;
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b62      	cmp	r3, #98	; 0x62
 8000b1c:	dc03      	bgt.n	8000b26 <fsm_settings_run+0x1a2>
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	e000      	b.n	8000b28 <fsm_settings_run+0x1a4>
 8000b26:	2300      	movs	r3, #0
 8000b28:	4a4a      	ldr	r2, [pc, #296]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000b2a:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_redtime, 2);
 8000b2c:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fb68 	bl	8001208 <setBuffer>
		if (isKeyPressed(2)) {
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fb8d 	bl	8000258 <isKeyPressed>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d021      	beq.n	8000b88 <fsm_settings_run+0x204>
			setTimer(1,10000);
 8000b44:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fce3 	bl	8001514 <setTimer>
			ambertime = (tmp_ambertime + greentime > 99) ? ambertime : tmp_ambertime;
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <fsm_settings_run+0x2d4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	2b63      	cmp	r3, #99	; 0x63
 8000b5a:	dd02      	ble.n	8000b62 <fsm_settings_run+0x1de>
 8000b5c:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <fsm_settings_run+0x2c8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	e001      	b.n	8000b66 <fsm_settings_run+0x1e2>
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a39      	ldr	r2, [pc, #228]	; (8000c4c <fsm_settings_run+0x2c8>)
 8000b68:	6013      	str	r3, [r2, #0]
			tmp_ambertime = (tmp_ambertime == ambertime) ? tmp_ambertime : ambertime;
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <fsm_settings_run+0x2c8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a39      	ldr	r2, [pc, #228]	; (8000c54 <fsm_settings_run+0x2d0>)
 8000b70:	6013      	str	r3, [r2, #0]
			redtime = greentime + ambertime;
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <fsm_settings_run+0x2d4>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <fsm_settings_run+0x2c8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000b7e:	6013      	str	r3, [r2, #0]
			tmp_redtime = redtime;
 8000b80:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <fsm_settings_run+0x2cc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <fsm_settings_run+0x2c0>)
 8000b86:	6013      	str	r3, [r2, #0]
		if (getFlag(2)) {
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f000 fd17 	bl	80015bc <getFlag>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d018      	beq.n	8000bc6 <fsm_settings_run+0x242>
			setTimer(2,250);
 8000b94:	21fa      	movs	r1, #250	; 0xfa
 8000b96:	2002      	movs	r0, #2
 8000b98:	f000 fcbc 	bl	8001514 <setTimer>
			led7seg_run();
 8000b9c:	f000 fb1e 	bl	80011dc <led7seg_run>
			if (!(toggle++)) setallAmber();
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	4928      	ldr	r1, [pc, #160]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000ba8:	600a      	str	r2, [r1, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <fsm_settings_run+0x230>
 8000bae:	f000 fed9 	bl	8001964 <setallAmber>
 8000bb2:	e008      	b.n	8000bc6 <fsm_settings_run+0x242>
			else if (toggle) {
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d004      	beq.n	8000bc6 <fsm_settings_run+0x242>
				setallOff();
 8000bbc:	f000 fefc 	bl	80019b8 <setallOff>
				toggle = 0;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
		if (getFlag(1)) {
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 fcf8 	bl	80015bc <getFlag>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 809b 	beq.w	8000d0a <fsm_settings_run+0x386>
			toggle = 0;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
			status = MODE0;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <fsm_settings_run+0x2bc>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
			countAgain();
 8000be0:	f000 fb4e 	bl	8001280 <countAgain>
		break;
 8000be4:	e091      	b.n	8000d0a <fsm_settings_run+0x386>
		setBuffer(tmp_greentime, 4);
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <fsm_settings_run+0x2d8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2104      	movs	r1, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fb0b 	bl	8001208 <setBuffer>
		if (isKeyPressed(0) || getFlag(1)) {
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fb30 	bl	8000258 <isKeyPressed>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d105      	bne.n	8000c0a <fsm_settings_run+0x286>
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 fcdc 	bl	80015bc <getFlag>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <fsm_settings_run+0x296>
			toggle = 0;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <fsm_settings_run+0x2c4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
			status = MODE0;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <fsm_settings_run+0x2bc>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
			countAgain();
 8000c16:	f000 fb33 	bl	8001280 <countAgain>
		if (isKeyPressed(1)) {
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fb1c 	bl	8000258 <isKeyPressed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d025      	beq.n	8000c72 <fsm_settings_run+0x2ee>
			setTimer(1,10000);
 8000c26:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 fc72 	bl	8001514 <setTimer>
			tmp_greentime = (tmp_greentime + 1 > 99) ? 0 : tmp_greentime + 1;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <fsm_settings_run+0x2d8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b62      	cmp	r3, #98	; 0x62
 8000c36:	dc13      	bgt.n	8000c60 <fsm_settings_run+0x2dc>
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <fsm_settings_run+0x2d8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	e010      	b.n	8000c62 <fsm_settings_run+0x2de>
 8000c40:	20000080 	.word	0x20000080
 8000c44:	2000004c 	.word	0x2000004c
 8000c48:	2000007c 	.word	0x2000007c
 8000c4c:	20000044 	.word	0x20000044
 8000c50:	20000040 	.word	0x20000040
 8000c54:	20000050 	.word	0x20000050
 8000c58:	2000003c 	.word	0x2000003c
 8000c5c:	20000048 	.word	0x20000048
 8000c60:	2300      	movs	r3, #0
 8000c62:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <fsm_settings_run+0x390>)
 8000c64:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_greentime, 2);
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <fsm_settings_run+0x390>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 facb 	bl	8001208 <setBuffer>
		if (isKeyPressed(2)) {
 8000c72:	2002      	movs	r0, #2
 8000c74:	f7ff faf0 	bl	8000258 <isKeyPressed>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d021      	beq.n	8000cc2 <fsm_settings_run+0x33e>
			setTimer(1,10000);
 8000c7e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fc46 	bl	8001514 <setTimer>
			greentime = (tmp_greentime + ambertime > 99) ? greentime : tmp_greentime;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <fsm_settings_run+0x390>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <fsm_settings_run+0x394>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	2b63      	cmp	r3, #99	; 0x63
 8000c94:	dd02      	ble.n	8000c9c <fsm_settings_run+0x318>
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <fsm_settings_run+0x398>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	e001      	b.n	8000ca0 <fsm_settings_run+0x31c>
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <fsm_settings_run+0x390>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <fsm_settings_run+0x398>)
 8000ca2:	6013      	str	r3, [r2, #0]
			tmp_greentime = (tmp_greentime == greentime) ? tmp_greentime : greentime;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <fsm_settings_run+0x398>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <fsm_settings_run+0x390>)
 8000caa:	6013      	str	r3, [r2, #0]
			redtime = greentime + ambertime;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <fsm_settings_run+0x398>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <fsm_settings_run+0x394>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <fsm_settings_run+0x39c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			tmp_redtime = redtime;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <fsm_settings_run+0x39c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <fsm_settings_run+0x3a0>)
 8000cc0:	6013      	str	r3, [r2, #0]
		if (getFlag(2)) {
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f000 fc7a 	bl	80015bc <getFlag>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01f      	beq.n	8000d0e <fsm_settings_run+0x38a>
			setTimer(2,250);
 8000cce:	21fa      	movs	r1, #250	; 0xfa
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 fc1f 	bl	8001514 <setTimer>
			led7seg_run();
 8000cd6:	f000 fa81 	bl	80011dc <led7seg_run>
			if (!(toggle++)) setallGreen();
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <fsm_settings_run+0x3a4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4911      	ldr	r1, [pc, #68]	; (8000d28 <fsm_settings_run+0x3a4>)
 8000ce2:	600a      	str	r2, [r1, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <fsm_settings_run+0x36a>
 8000ce8:	f000 fe12 	bl	8001910 <setallGreen>
		break;
 8000cec:	e00f      	b.n	8000d0e <fsm_settings_run+0x38a>
			else if (toggle) {
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <fsm_settings_run+0x3a4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00b      	beq.n	8000d0e <fsm_settings_run+0x38a>
				setallOff();
 8000cf6:	f000 fe5f 	bl	80019b8 <setallOff>
				toggle = 0;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <fsm_settings_run+0x3a4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
		break;
 8000d00:	e005      	b.n	8000d0e <fsm_settings_run+0x38a>
		break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <fsm_settings_run+0x38c>
		break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <fsm_settings_run+0x38c>
		break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <fsm_settings_run+0x38c>
		break;
 8000d0e:	bf00      	nop
	}
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000048 	.word	0x20000048
 8000d18:	20000044 	.word	0x20000044
 8000d1c:	2000003c 	.word	0x2000003c
 8000d20:	20000040 	.word	0x20000040
 8000d24:	2000004c 	.word	0x2000004c
 8000d28:	2000007c 	.word	0x2000007c

08000d2c <display7SEG>:
#include <global.h>

const int MAX_LED = 4;
int index_led = 0;

void display7SEG(int num){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b09      	cmp	r3, #9
 8000d38:	f200 8180 	bhi.w	800103c <display7SEG+0x310>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <display7SEG+0x18>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d6d 	.word	0x08000d6d
 8000d48:	08000db5 	.word	0x08000db5
 8000d4c:	08000dfd 	.word	0x08000dfd
 8000d50:	08000e45 	.word	0x08000e45
 8000d54:	08000e8d 	.word	0x08000e8d
 8000d58:	08000ed5 	.word	0x08000ed5
 8000d5c:	08000f1d 	.word	0x08000f1d
 8000d60:	08000f65 	.word	0x08000f65
 8000d64:	08000fad 	.word	0x08000fad
 8000d68:	08000ff5 	.word	0x08000ff5
	switch (num) {
	case 0:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2101      	movs	r1, #1
 8000d70:	48c6      	ldr	r0, [pc, #792]	; (800108c <display7SEG+0x360>)
 8000d72:	f001 f972 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	48c4      	ldr	r0, [pc, #784]	; (800108c <display7SEG+0x360>)
 8000d7c:	f001 f96d 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2104      	movs	r1, #4
 8000d84:	48c1      	ldr	r0, [pc, #772]	; (800108c <display7SEG+0x360>)
 8000d86:	f001 f968 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	48bf      	ldr	r0, [pc, #764]	; (800108c <display7SEG+0x360>)
 8000d90:	f001 f963 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2110      	movs	r1, #16
 8000d98:	48bc      	ldr	r0, [pc, #752]	; (800108c <display7SEG+0x360>)
 8000d9a:	f001 f95e 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2120      	movs	r1, #32
 8000da2:	48ba      	ldr	r0, [pc, #744]	; (800108c <display7SEG+0x360>)
 8000da4:	f001 f959 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	48b7      	ldr	r0, [pc, #732]	; (800108c <display7SEG+0x360>)
 8000dae:	f001 f954 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000db2:	e167      	b.n	8001084 <display7SEG+0x358>
	case 1:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	48b4      	ldr	r0, [pc, #720]	; (800108c <display7SEG+0x360>)
 8000dba:	f001 f94e 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	48b2      	ldr	r0, [pc, #712]	; (800108c <display7SEG+0x360>)
 8000dc4:	f001 f949 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2104      	movs	r1, #4
 8000dcc:	48af      	ldr	r0, [pc, #700]	; (800108c <display7SEG+0x360>)
 8000dce:	f001 f944 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	48ad      	ldr	r0, [pc, #692]	; (800108c <display7SEG+0x360>)
 8000dd8:	f001 f93f 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2110      	movs	r1, #16
 8000de0:	48aa      	ldr	r0, [pc, #680]	; (800108c <display7SEG+0x360>)
 8000de2:	f001 f93a 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2120      	movs	r1, #32
 8000dea:	48a8      	ldr	r0, [pc, #672]	; (800108c <display7SEG+0x360>)
 8000dec:	f001 f935 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	48a5      	ldr	r0, [pc, #660]	; (800108c <display7SEG+0x360>)
 8000df6:	f001 f930 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000dfa:	e143      	b.n	8001084 <display7SEG+0x358>
	case 2:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2101      	movs	r1, #1
 8000e00:	48a2      	ldr	r0, [pc, #648]	; (800108c <display7SEG+0x360>)
 8000e02:	f001 f92a 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2102      	movs	r1, #2
 8000e0a:	48a0      	ldr	r0, [pc, #640]	; (800108c <display7SEG+0x360>)
 8000e0c:	f001 f925 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2104      	movs	r1, #4
 8000e14:	489d      	ldr	r0, [pc, #628]	; (800108c <display7SEG+0x360>)
 8000e16:	f001 f920 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	489b      	ldr	r0, [pc, #620]	; (800108c <display7SEG+0x360>)
 8000e20:	f001 f91b 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4898      	ldr	r0, [pc, #608]	; (800108c <display7SEG+0x360>)
 8000e2a:	f001 f916 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2120      	movs	r1, #32
 8000e32:	4896      	ldr	r0, [pc, #600]	; (800108c <display7SEG+0x360>)
 8000e34:	f001 f911 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4893      	ldr	r0, [pc, #588]	; (800108c <display7SEG+0x360>)
 8000e3e:	f001 f90c 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000e42:	e11f      	b.n	8001084 <display7SEG+0x358>
	case 3:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	4890      	ldr	r0, [pc, #576]	; (800108c <display7SEG+0x360>)
 8000e4a:	f001 f906 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2102      	movs	r1, #2
 8000e52:	488e      	ldr	r0, [pc, #568]	; (800108c <display7SEG+0x360>)
 8000e54:	f001 f901 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	488b      	ldr	r0, [pc, #556]	; (800108c <display7SEG+0x360>)
 8000e5e:	f001 f8fc 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2108      	movs	r1, #8
 8000e66:	4889      	ldr	r0, [pc, #548]	; (800108c <display7SEG+0x360>)
 8000e68:	f001 f8f7 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4886      	ldr	r0, [pc, #536]	; (800108c <display7SEG+0x360>)
 8000e72:	f001 f8f2 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2120      	movs	r1, #32
 8000e7a:	4884      	ldr	r0, [pc, #528]	; (800108c <display7SEG+0x360>)
 8000e7c:	f001 f8ed 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	4881      	ldr	r0, [pc, #516]	; (800108c <display7SEG+0x360>)
 8000e86:	f001 f8e8 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000e8a:	e0fb      	b.n	8001084 <display7SEG+0x358>
	case 4:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	487e      	ldr	r0, [pc, #504]	; (800108c <display7SEG+0x360>)
 8000e92:	f001 f8e2 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	487c      	ldr	r0, [pc, #496]	; (800108c <display7SEG+0x360>)
 8000e9c:	f001 f8dd 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4879      	ldr	r0, [pc, #484]	; (800108c <display7SEG+0x360>)
 8000ea6:	f001 f8d8 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2108      	movs	r1, #8
 8000eae:	4877      	ldr	r0, [pc, #476]	; (800108c <display7SEG+0x360>)
 8000eb0:	f001 f8d3 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4874      	ldr	r0, [pc, #464]	; (800108c <display7SEG+0x360>)
 8000eba:	f001 f8ce 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4872      	ldr	r0, [pc, #456]	; (800108c <display7SEG+0x360>)
 8000ec4:	f001 f8c9 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	486f      	ldr	r0, [pc, #444]	; (800108c <display7SEG+0x360>)
 8000ece:	f001 f8c4 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000ed2:	e0d7      	b.n	8001084 <display7SEG+0x358>
	case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	486c      	ldr	r0, [pc, #432]	; (800108c <display7SEG+0x360>)
 8000eda:	f001 f8be 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	486a      	ldr	r0, [pc, #424]	; (800108c <display7SEG+0x360>)
 8000ee4:	f001 f8b9 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2104      	movs	r1, #4
 8000eec:	4867      	ldr	r0, [pc, #412]	; (800108c <display7SEG+0x360>)
 8000eee:	f001 f8b4 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4865      	ldr	r0, [pc, #404]	; (800108c <display7SEG+0x360>)
 8000ef8:	f001 f8af 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2110      	movs	r1, #16
 8000f00:	4862      	ldr	r0, [pc, #392]	; (800108c <display7SEG+0x360>)
 8000f02:	f001 f8aa 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4860      	ldr	r0, [pc, #384]	; (800108c <display7SEG+0x360>)
 8000f0c:	f001 f8a5 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	485d      	ldr	r0, [pc, #372]	; (800108c <display7SEG+0x360>)
 8000f16:	f001 f8a0 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000f1a:	e0b3      	b.n	8001084 <display7SEG+0x358>
	case 6:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	485a      	ldr	r0, [pc, #360]	; (800108c <display7SEG+0x360>)
 8000f22:	f001 f89a 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4858      	ldr	r0, [pc, #352]	; (800108c <display7SEG+0x360>)
 8000f2c:	f001 f895 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	4855      	ldr	r0, [pc, #340]	; (800108c <display7SEG+0x360>)
 8000f36:	f001 f890 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	4853      	ldr	r0, [pc, #332]	; (800108c <display7SEG+0x360>)
 8000f40:	f001 f88b 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	4850      	ldr	r0, [pc, #320]	; (800108c <display7SEG+0x360>)
 8000f4a:	f001 f886 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	484e      	ldr	r0, [pc, #312]	; (800108c <display7SEG+0x360>)
 8000f54:	f001 f881 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	484b      	ldr	r0, [pc, #300]	; (800108c <display7SEG+0x360>)
 8000f5e:	f001 f87c 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000f62:	e08f      	b.n	8001084 <display7SEG+0x358>
	case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2101      	movs	r1, #1
 8000f68:	4848      	ldr	r0, [pc, #288]	; (800108c <display7SEG+0x360>)
 8000f6a:	f001 f876 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2102      	movs	r1, #2
 8000f72:	4846      	ldr	r0, [pc, #280]	; (800108c <display7SEG+0x360>)
 8000f74:	f001 f871 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4843      	ldr	r0, [pc, #268]	; (800108c <display7SEG+0x360>)
 8000f7e:	f001 f86c 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2108      	movs	r1, #8
 8000f86:	4841      	ldr	r0, [pc, #260]	; (800108c <display7SEG+0x360>)
 8000f88:	f001 f867 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	483e      	ldr	r0, [pc, #248]	; (800108c <display7SEG+0x360>)
 8000f92:	f001 f862 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2120      	movs	r1, #32
 8000f9a:	483c      	ldr	r0, [pc, #240]	; (800108c <display7SEG+0x360>)
 8000f9c:	f001 f85d 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4839      	ldr	r0, [pc, #228]	; (800108c <display7SEG+0x360>)
 8000fa6:	f001 f858 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000faa:	e06b      	b.n	8001084 <display7SEG+0x358>
	case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4836      	ldr	r0, [pc, #216]	; (800108c <display7SEG+0x360>)
 8000fb2:	f001 f852 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4834      	ldr	r0, [pc, #208]	; (800108c <display7SEG+0x360>)
 8000fbc:	f001 f84d 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4831      	ldr	r0, [pc, #196]	; (800108c <display7SEG+0x360>)
 8000fc6:	f001 f848 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2108      	movs	r1, #8
 8000fce:	482f      	ldr	r0, [pc, #188]	; (800108c <display7SEG+0x360>)
 8000fd0:	f001 f843 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	482c      	ldr	r0, [pc, #176]	; (800108c <display7SEG+0x360>)
 8000fda:	f001 f83e 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	482a      	ldr	r0, [pc, #168]	; (800108c <display7SEG+0x360>)
 8000fe4:	f001 f839 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	4827      	ldr	r0, [pc, #156]	; (800108c <display7SEG+0x360>)
 8000fee:	f001 f834 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8000ff2:	e047      	b.n	8001084 <display7SEG+0x358>
	case 9:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4824      	ldr	r0, [pc, #144]	; (800108c <display7SEG+0x360>)
 8000ffa:	f001 f82e 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2102      	movs	r1, #2
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <display7SEG+0x360>)
 8001004:	f001 f829 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2104      	movs	r1, #4
 800100c:	481f      	ldr	r0, [pc, #124]	; (800108c <display7SEG+0x360>)
 800100e:	f001 f824 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2108      	movs	r1, #8
 8001016:	481d      	ldr	r0, [pc, #116]	; (800108c <display7SEG+0x360>)
 8001018:	f001 f81f 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481a      	ldr	r0, [pc, #104]	; (800108c <display7SEG+0x360>)
 8001022:	f001 f81a 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2120      	movs	r1, #32
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <display7SEG+0x360>)
 800102c:	f001 f815 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <display7SEG+0x360>)
 8001036:	f001 f810 	bl	800205a <HAL_GPIO_WritePin>
				break;
 800103a:	e023      	b.n	8001084 <display7SEG+0x358>
	default:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	4812      	ldr	r0, [pc, #72]	; (800108c <display7SEG+0x360>)
 8001042:	f001 f80a 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2102      	movs	r1, #2
 800104a:	4810      	ldr	r0, [pc, #64]	; (800108c <display7SEG+0x360>)
 800104c:	f001 f805 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <display7SEG+0x360>)
 8001056:	f001 f800 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <display7SEG+0x360>)
 8001060:	f000 fffb 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2110      	movs	r1, #16
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <display7SEG+0x360>)
 800106a:	f000 fff6 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2120      	movs	r1, #32
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <display7SEG+0x360>)
 8001074:	f000 fff1 	bl	800205a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <display7SEG+0x360>)
 800107e:	f000 ffec 	bl	800205a <HAL_GPIO_WritePin>
				break;
 8001082:	bf00      	nop
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010c00 	.word	0x40010c00

08001090 <update7SEG>:
void update7SEG (int index){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d87e      	bhi.n	800119c <update7SEG+0x10c>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <update7SEG+0x14>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010ef 	.word	0x080010ef
 80010ac:	08001129 	.word	0x08001129
 80010b0:	08001163 	.word	0x08001163
	switch (index) {
	case 0:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	4846      	ldr	r0, [pc, #280]	; (80011d4 <update7SEG+0x144>)
 80010ba:	f000 ffce 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4843      	ldr	r0, [pc, #268]	; (80011d4 <update7SEG+0x144>)
 80010c6:	f000 ffc8 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4840      	ldr	r0, [pc, #256]	; (80011d4 <update7SEG+0x144>)
 80010d2:	f000 ffc2 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	483d      	ldr	r0, [pc, #244]	; (80011d4 <update7SEG+0x144>)
 80010de:	f000 ffbc 	bl	800205a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <update7SEG+0x148>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe20 	bl	8000d2c <display7SEG>
		break;
 80010ec:	e06e      	b.n	80011cc <update7SEG+0x13c>
	case 1:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	4838      	ldr	r0, [pc, #224]	; (80011d4 <update7SEG+0x144>)
 80010f4:	f000 ffb1 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fe:	4835      	ldr	r0, [pc, #212]	; (80011d4 <update7SEG+0x144>)
 8001100:	f000 ffab 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	4832      	ldr	r0, [pc, #200]	; (80011d4 <update7SEG+0x144>)
 800110c:	f000 ffa5 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001116:	482f      	ldr	r0, [pc, #188]	; (80011d4 <update7SEG+0x144>)
 8001118:	f000 ff9f 	bl	800205a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <update7SEG+0x148>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe03 	bl	8000d2c <display7SEG>
		break;
 8001126:	e051      	b.n	80011cc <update7SEG+0x13c>
	case 2:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	4829      	ldr	r0, [pc, #164]	; (80011d4 <update7SEG+0x144>)
 800112e:	f000 ff94 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4826      	ldr	r0, [pc, #152]	; (80011d4 <update7SEG+0x144>)
 800113a:	f000 ff8e 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	4823      	ldr	r0, [pc, #140]	; (80011d4 <update7SEG+0x144>)
 8001146:	f000 ff88 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	4820      	ldr	r0, [pc, #128]	; (80011d4 <update7SEG+0x144>)
 8001152:	f000 ff82 	bl	800205a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <update7SEG+0x148>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fde6 	bl	8000d2c <display7SEG>
		break;
 8001160:	e034      	b.n	80011cc <update7SEG+0x13c>
	case 3:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <update7SEG+0x144>)
 8001168:	f000 ff77 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4818      	ldr	r0, [pc, #96]	; (80011d4 <update7SEG+0x144>)
 8001174:	f000 ff71 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117e:	4815      	ldr	r0, [pc, #84]	; (80011d4 <update7SEG+0x144>)
 8001180:	f000 ff6b 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <update7SEG+0x144>)
 800118c:	f000 ff65 	bl	800205a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <update7SEG+0x148>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fdc9 	bl	8000d2c <display7SEG>
		break;
 800119a:	e017      	b.n	80011cc <update7SEG+0x13c>

	default:
		HAL_GPIO_WritePin(enb0_GPIO_Port, enb0_Pin, SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <update7SEG+0x144>)
 80011a2:	f000 ff5a 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <update7SEG+0x144>)
 80011ae:	f000 ff54 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <update7SEG+0x144>)
 80011ba:	f000 ff4e 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <update7SEG+0x144>)
 80011c6:	f000 ff48 	bl	800205a <HAL_GPIO_WritePin>
		break;
 80011ca:	bf00      	nop
	}
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010c00 	.word	0x40010c00
 80011d8:	200000a0 	.word	0x200000a0

080011dc <led7seg_run>:
//Run every 250ms
void led7seg_run() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (index_led > 3) {
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <led7seg_run+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	dd02      	ble.n	80011ee <led7seg_run+0x12>
			index_led = 0;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <led7seg_run+0x28>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
		}
		update7SEG(index_led++);
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <led7seg_run+0x28>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	4903      	ldr	r1, [pc, #12]	; (8001204 <led7seg_run+0x28>)
 80011f6:	600a      	str	r2, [r1, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff49 	bl	8001090 <update7SEG>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000084 	.word	0x20000084

08001208 <setBuffer>:

void setBuffer(int led0, int led1) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led0/10;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a18      	ldr	r2, [pc, #96]	; (8001278 <setBuffer+0x70>)
 8001216:	fb82 1203 	smull	r1, r2, r2, r3
 800121a:	1092      	asrs	r2, r2, #2
 800121c:	17db      	asrs	r3, r3, #31
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <setBuffer+0x74>)
 8001222:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led0%10;
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <setBuffer+0x70>)
 8001228:	fb83 2301 	smull	r2, r3, r3, r1
 800122c:	109a      	asrs	r2, r3, #2
 800122e:	17cb      	asrs	r3, r1, #31
 8001230:	1ad2      	subs	r2, r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	1aca      	subs	r2, r1, r3
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <setBuffer+0x74>)
 800123e:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led1/10;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <setBuffer+0x70>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	1092      	asrs	r2, r2, #2
 800124a:	17db      	asrs	r3, r3, #31
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <setBuffer+0x74>)
 8001250:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led1%10;
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <setBuffer+0x70>)
 8001256:	fb83 2301 	smull	r2, r3, r3, r1
 800125a:	109a      	asrs	r2, r3, #2
 800125c:	17cb      	asrs	r3, r1, #31
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	1aca      	subs	r2, r1, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <setBuffer+0x74>)
 800126c:	60da      	str	r2, [r3, #12]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	66666667 	.word	0x66666667
 800127c:	200000a0 	.word	0x200000a0

08001280 <countAgain>:

void countAgain() {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	index_led = 0;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <countAgain+0x14>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000084 	.word	0x20000084

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fbdc 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f82c 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 f8b2 	bl	800140c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012a8:	f000 f864 	bl	8001374 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <main+0x58>)
 80012ae:	f001 fb31 	bl	8002914 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1000);
 80012b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f92c 	bl	8001514 <setTimer>
  status = MODE0;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <main+0x5c>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if (getFlag(0)) {
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f97a 	bl	80015bc <getFlag>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <main+0x48>
		  setTimer(0,1000);
 80012ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f91e 	bl	8001514 <setTimer>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80012d8:	2120      	movs	r1, #32
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <main+0x60>)
 80012dc:	f000 fed5 	bl	800208a <HAL_GPIO_TogglePin>
	  }
	  fsm_manual_run();
 80012e0:	f7ff f9ee 	bl	80006c0 <fsm_manual_run>
	  fsm_settings_run();
 80012e4:	f7ff fb4e 	bl	8000984 <fsm_settings_run>
	  fsm_automatic_run();
 80012e8:	f7ff f840 	bl	800036c <fsm_automatic_run>
	  if (getFlag(0)) {
 80012ec:	e7e9      	b.n	80012c2 <main+0x2a>
 80012ee:	bf00      	nop
 80012f0:	200000b8 	.word	0x200000b8
 80012f4:	20000080 	.word	0x20000080
 80012f8:	40010800 	.word	0x40010800

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	; 0x40
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f001 feb2 	bl	8003074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001322:	2301      	movs	r3, #1
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2310      	movs	r3, #16
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fec2 	bl	80020bc <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800133e:	f000 f8e3 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f92e 	bl	80025bc <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001366:	f000 f8cf 	bl	8001508 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3740      	adds	r7, #64	; 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM2_Init+0x94>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM2_Init+0x94>)
 800139a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800139e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM2_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM2_Init+0x94>)
 80013a8:	2209      	movs	r2, #9
 80013aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_TIM2_Init+0x94>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_TIM2_Init+0x94>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b8:	4813      	ldr	r0, [pc, #76]	; (8001408 <MX_TIM2_Init+0x94>)
 80013ba:	f001 fa5b 	bl	8002874 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013c4:	f000 f8a0 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM2_Init+0x94>)
 80013d6:	f001 fbd9 	bl	8002b8c <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013e0:	f000 f892 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM2_Init+0x94>)
 80013f2:	f001 fdb1 	bl	8002f58 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013fc:	f000 f884 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000b8 	.word	0x200000b8

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_GPIO_Init+0xd4>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <MX_GPIO_Init+0xd4>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_GPIO_Init+0xd4>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_GPIO_Init+0xd4>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <MX_GPIO_Init+0xd4>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_GPIO_Init+0xd4>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_GPIO_Init+0xd4>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <MX_GPIO_Init+0xd4>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <MX_GPIO_Init+0xd4>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|led_red0_Pin|led_green0_Pin|led_amber0_Pin
 8001468:	2200      	movs	r2, #0
 800146a:	f64f 4120 	movw	r1, #64544	; 0xfc20
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <MX_GPIO_Init+0xd8>)
 8001470:	f000 fdf3 	bl	800205a <HAL_GPIO_WritePin>
                          |led_red1_Pin|led_green1_Pin|led_amber1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|enb3_Pin
 8001474:	2200      	movs	r2, #0
 8001476:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800147a:	481b      	ldr	r0, [pc, #108]	; (80014e8 <MX_GPIO_Init+0xdc>)
 800147c:	f000 fded 	bl	800205a <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |enb0_Pin|enb1_Pin|enb2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001480:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4815      	ldr	r0, [pc, #84]	; (80014ec <MX_GPIO_Init+0xe0>)
 8001496:	f000 fc4f 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin led_red0_Pin led_green0_Pin led_amber0_Pin
                           led_red1_Pin led_green1_Pin led_amber1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|led_red0_Pin|led_green0_Pin|led_amber0_Pin
 800149a:	f64f 4320 	movw	r3, #64544	; 0xfc20
 800149e:	613b      	str	r3, [r7, #16]
                          |led_red1_Pin|led_green1_Pin|led_amber1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4619      	mov	r1, r3
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_GPIO_Init+0xd8>)
 80014b4:	f000 fc40 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin enb3_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           enb0_Pin enb1_Pin enb2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|enb3_Pin
 80014b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014bc:	613b      	str	r3, [r7, #16]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |enb0_Pin|enb1_Pin|enb2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_GPIO_Init+0xdc>)
 80014d2:	f000 fc31 	bl	8001d38 <HAL_GPIO_Init>

}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	40011000 	.word	0x40011000

080014f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	timerRun();
 80014f8:	f000 f830 	bl	800155c <timerRun>
	getKeyInput();
 80014fc:	f7fe fe26 	bl	800014c <getKeyInput>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <setTimer>:
#include "software_interrupt.h"

int timer_flag[NUM_TIM];
int timer_counter[NUM_TIM];

void setTimer(int index ,int duration) {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	if (index < NUM_TIM) {
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	dc0f      	bgt.n	8001544 <setTimer+0x30>
		timer_counter[index] = duration/TIME_CYCLE;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <setTimer+0x3c>)
 8001528:	fb82 1203 	smull	r1, r2, r2, r3
 800152c:	1092      	asrs	r2, r2, #2
 800152e:	17db      	asrs	r3, r3, #31
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <setTimer+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer_flag[index] = 0;
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <setTimer+0x44>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2100      	movs	r1, #0
 8001540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	66666667 	.word	0x66666667
 8001554:	20000100 	.word	0x20000100
 8001558:	2000010c 	.word	0x2000010c

0800155c <timerRun>:

void timerRun() {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIM; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	e01c      	b.n	80015a2 <timerRun+0x46>
		if (timer_counter[i] >= 0)
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <timerRun+0x58>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db13      	blt.n	800159c <timerRun+0x40>
		{
			timer_counter[i] --;
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <timerRun+0x58>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <timerRun+0x58>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0)
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <timerRun+0x58>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dc04      	bgt.n	800159c <timerRun+0x40>
			{
				timer_flag[i] = 1;
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <timerRun+0x5c>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2101      	movs	r1, #1
 8001598:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIM; i++) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3301      	adds	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	dddf      	ble.n	8001568 <timerRun+0xc>
			}
		}
	}
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000100 	.word	0x20000100
 80015b8:	2000010c 	.word	0x2000010c

080015bc <getFlag>:

int getFlag (int index) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if (index < NUM_TIM) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	dc0e      	bgt.n	80015e8 <getFlag+0x2c>
		if (timer_flag[index] == 1) {
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <getFlag+0x3c>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d106      	bne.n	80015e4 <getFlag+0x28>
			timer_flag[index] = 0;
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <getFlag+0x3c>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2100      	movs	r1, #0
 80015dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e003      	b.n	80015ec <getFlag+0x30>
		}
		return 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e001      	b.n	80015ec <getFlag+0x30>
	}
	return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000010c 	.word	0x2000010c

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_MspInit+0x5c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_MspInit+0x5c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_MspInit+0x60>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_MspInit+0x60>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d113      	bne.n	800169a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fb1b 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fb34 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ee:	f000 f9f9 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM2_IRQHandler+0x10>)
 80016fe:	f001 f955 	bl	80029ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000b8 	.word	0x200000b8

0800170c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <set_off0_off1>:
 */

#include <traffic_light.h>
#include <led7_segment.h>
// - ways
void set_off0_off1(){
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <set_off0_off1+0x50>)
 8001724:	f000 fc99 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <set_off0_off1+0x50>)
 8001730:	f000 fc93 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <set_off0_off1+0x50>)
 800173c:	f000 fc8d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <set_off0_off1+0x50>)
 8001748:	f000 fc87 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <set_off0_off1+0x50>)
 8001754:	f000 fc81 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <set_off0_off1+0x50>)
 8001760:	f000 fc7b 	bl	800205a <HAL_GPIO_WritePin>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40010800 	.word	0x40010800

0800176c <set_red0_green1>:

void set_red0_green1(){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001776:	4811      	ldr	r0, [pc, #68]	; (80017bc <set_red0_green1+0x50>)
 8001778:	f000 fc6f 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <set_red0_green1+0x50>)
 8001784:	f000 fc69 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178e:	480b      	ldr	r0, [pc, #44]	; (80017bc <set_red0_green1+0x50>)
 8001790:	f000 fc63 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	4808      	ldr	r0, [pc, #32]	; (80017bc <set_red0_green1+0x50>)
 800179c:	f000 fc5d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <set_red0_green1+0x50>)
 80017a8:	f000 fc57 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b2:	4802      	ldr	r0, [pc, #8]	; (80017bc <set_red0_green1+0x50>)
 80017b4:	f000 fc51 	bl	800205a <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40010800 	.word	0x40010800

080017c0 <set_red0_amber1>:
void set_red0_amber1() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <set_red0_amber1+0x50>)
 80017cc:	f000 fc45 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <set_red0_amber1+0x50>)
 80017d8:	f000 fc3f 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <set_red0_amber1+0x50>)
 80017e4:	f000 fc39 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <set_red0_amber1+0x50>)
 80017f0:	f000 fc33 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <set_red0_amber1+0x50>)
 80017fc:	f000 fc2d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <set_red0_amber1+0x50>)
 8001808:	f000 fc27 	bl	800205a <HAL_GPIO_WritePin>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010800 	.word	0x40010800

08001814 <set_green0_red1>:
void set_green0_red1() {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <set_green0_red1+0x50>)
 8001820:	f000 fc1b 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182a:	480e      	ldr	r0, [pc, #56]	; (8001864 <set_green0_red1+0x50>)
 800182c:	f000 fc15 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <set_green0_red1+0x50>)
 8001838:	f000 fc0f 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <set_green0_red1+0x50>)
 8001844:	f000 fc09 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <set_green0_red1+0x50>)
 8001850:	f000 fc03 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <set_green0_red1+0x50>)
 800185c:	f000 fbfd 	bl	800205a <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010800 	.word	0x40010800

08001868 <set_amber0_red1>:
void set_amber0_red1()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <set_amber0_red1+0x50>)
 8001874:	f000 fbf1 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	480e      	ldr	r0, [pc, #56]	; (80018b8 <set_amber0_red1+0x50>)
 8001880:	f000 fbeb 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <set_amber0_red1+0x50>)
 800188c:	f000 fbe5 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001896:	4808      	ldr	r0, [pc, #32]	; (80018b8 <set_amber0_red1+0x50>)
 8001898:	f000 fbdf 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <set_amber0_red1+0x50>)
 80018a4:	f000 fbd9 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ae:	4802      	ldr	r0, [pc, #8]	; (80018b8 <set_amber0_red1+0x50>)
 80018b0:	f000 fbd3 	bl	800205a <HAL_GPIO_WritePin>

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40010800 	.word	0x40010800

080018bc <setallRed>:

void setallRed() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <setallRed+0x50>)
 80018c8:	f000 fbc7 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d2:	480e      	ldr	r0, [pc, #56]	; (800190c <setallRed+0x50>)
 80018d4:	f000 fbc1 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <setallRed+0x50>)
 80018e0:	f000 fbbb 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <setallRed+0x50>)
 80018ec:	f000 fbb5 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <setallRed+0x50>)
 80018f8:	f000 fbaf 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001902:	4802      	ldr	r0, [pc, #8]	; (800190c <setallRed+0x50>)
 8001904:	f000 fba9 	bl	800205a <HAL_GPIO_WritePin>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40010800 	.word	0x40010800

08001910 <setallGreen>:
void setallGreen() {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191a:	4811      	ldr	r0, [pc, #68]	; (8001960 <setallGreen+0x50>)
 800191c:	f000 fb9d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <setallGreen+0x50>)
 8001928:	f000 fb97 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <setallGreen+0x50>)
 8001934:	f000 fb91 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	4808      	ldr	r0, [pc, #32]	; (8001960 <setallGreen+0x50>)
 8001940:	f000 fb8b 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <setallGreen+0x50>)
 800194c:	f000 fb85 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001956:	4802      	ldr	r0, [pc, #8]	; (8001960 <setallGreen+0x50>)
 8001958:	f000 fb7f 	bl	800205a <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010800 	.word	0x40010800

08001964 <setallAmber>:
void setallAmber() {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <setallAmber+0x50>)
 8001970:	f000 fb73 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <setallAmber+0x50>)
 800197c:	f000 fb6d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <setallAmber+0x50>)
 8001988:	f000 fb67 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	4808      	ldr	r0, [pc, #32]	; (80019b4 <setallAmber+0x50>)
 8001994:	f000 fb61 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <setallAmber+0x50>)
 80019a0:	f000 fb5b 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019aa:	4802      	ldr	r0, [pc, #8]	; (80019b4 <setallAmber+0x50>)
 80019ac:	f000 fb55 	bl	800205a <HAL_GPIO_WritePin>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010800 	.word	0x40010800

080019b8 <setallOff>:
void setallOff() {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red0_GPIO_Port, led_red0_Pin, SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c2:	4811      	ldr	r0, [pc, #68]	; (8001a08 <setallOff+0x50>)
 80019c4:	f000 fb49 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber0_GPIO_Port, led_amber0_Pin, SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <setallOff+0x50>)
 80019d0:	f000 fb43 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green0_GPIO_Port, led_green0_Pin, SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <setallOff+0x50>)
 80019dc:	f000 fb3d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <setallOff+0x50>)
 80019e8:	f000 fb37 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_amber1_GPIO_Port, led_amber1_Pin, SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <setallOff+0x50>)
 80019f4:	f000 fb31 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <setallOff+0x50>)
 8001a00:	f000 fb2b 	bl	800205a <HAL_GPIO_WritePin>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010800 	.word	0x40010800

08001a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a0c:	f7ff fe7e 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a12:	490c      	ldr	r1, [pc, #48]	; (8001a44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a28:	4c09      	ldr	r4, [pc, #36]	; (8001a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f001 faf9 	bl	800302c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3a:	f7ff fc2d 	bl	8001298 <main>
  bx lr
 8001a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a48:	080030c8 	.word	0x080030c8
  ldr r2, =_sbss
 8001a4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a50:	2000011c 	.word	0x2000011c

08001a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_2_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_Init+0x28>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_Init+0x28>)
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f923 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6e:	200f      	movs	r0, #15
 8001a70:	f000 f808 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fdc2 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f93b 	bl	8001d1e <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f903 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000054 	.word	0x20000054
 8001adc:	2000005c 	.word	0x2000005c
 8001ae0:	20000058 	.word	0x20000058

08001ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x1c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x20>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_IncTick+0x20>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	2000005c 	.word	0x2000005c
 8001b04:	20000118 	.word	0x20000118

08001b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_GetTick+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000118 	.word	0x20000118

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <__NVIC_EnableIRQ+0x34>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff90 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff2d 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff42 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff90 	bl	8001c0c <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5f 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff35 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b08b      	sub	sp, #44	; 0x2c
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e148      	b.n	8001fde <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8137 	bne.w	8001fd8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4aa3      	ldr	r2, [pc, #652]	; (8001ffc <HAL_GPIO_Init+0x2c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d05e      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d74:	4aa1      	ldr	r2, [pc, #644]	; (8001ffc <HAL_GPIO_Init+0x2c4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d875      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d7a:	4aa1      	ldr	r2, [pc, #644]	; (8002000 <HAL_GPIO_Init+0x2c8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d058      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d80:	4a9f      	ldr	r2, [pc, #636]	; (8002000 <HAL_GPIO_Init+0x2c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d86f      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d86:	4a9f      	ldr	r2, [pc, #636]	; (8002004 <HAL_GPIO_Init+0x2cc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d052      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a9d      	ldr	r2, [pc, #628]	; (8002004 <HAL_GPIO_Init+0x2cc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d869      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d92:	4a9d      	ldr	r2, [pc, #628]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04c      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d98:	4a9b      	ldr	r2, [pc, #620]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d863      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a9b      	ldr	r2, [pc, #620]	; (800200c <HAL_GPIO_Init+0x2d4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d046      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001da4:	4a99      	ldr	r2, [pc, #612]	; (800200c <HAL_GPIO_Init+0x2d4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d85d      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d82a      	bhi.n	8001e04 <HAL_GPIO_Init+0xcc>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d859      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <HAL_GPIO_Init+0x80>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e0d 	.word	0x08001e0d
 8001dc0:	08001e1f 	.word	0x08001e1f
 8001dc4:	08001e61 	.word	0x08001e61
 8001dc8:	08001e67 	.word	0x08001e67
 8001dcc:	08001e67 	.word	0x08001e67
 8001dd0:	08001e67 	.word	0x08001e67
 8001dd4:	08001e67 	.word	0x08001e67
 8001dd8:	08001e67 	.word	0x08001e67
 8001ddc:	08001e67 	.word	0x08001e67
 8001de0:	08001e67 	.word	0x08001e67
 8001de4:	08001e67 	.word	0x08001e67
 8001de8:	08001e67 	.word	0x08001e67
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e67 	.word	0x08001e67
 8001df4:	08001e67 	.word	0x08001e67
 8001df8:	08001e67 	.word	0x08001e67
 8001dfc:	08001e15 	.word	0x08001e15
 8001e00:	08001e29 	.word	0x08001e29
 8001e04:	4a82      	ldr	r2, [pc, #520]	; (8002010 <HAL_GPIO_Init+0x2d8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e0a:	e02c      	b.n	8001e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e029      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e024      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	3308      	adds	r3, #8
 8001e24:	623b      	str	r3, [r7, #32]
          break;
 8001e26:	e01f      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e01a      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e013      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	611a      	str	r2, [r3, #16]
          break;
 8001e52:	e009      	b.n	8001e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	615a      	str	r2, [r3, #20]
          break;
 8001e5e:	e003      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          break;
 8001e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d801      	bhi.n	8001e72 <HAL_GPIO_Init+0x13a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_Init+0x13e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	; 0xff
 8001e7c:	d802      	bhi.n	8001e84 <HAL_GPIO_Init+0x14c>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x152>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3b08      	subs	r3, #8
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	210f      	movs	r1, #15
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8090 	beq.w	8001fd8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_GPIO_Init+0x2dc>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a55      	ldr	r2, [pc, #340]	; (8002014 <HAL_GPIO_Init+0x2dc>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_GPIO_Init+0x2dc>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed0:	4a51      	ldr	r2, [pc, #324]	; (8002018 <HAL_GPIO_Init+0x2e0>)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x2e4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00d      	beq.n	8001f18 <HAL_GPIO_Init+0x1e0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x1dc>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_GPIO_Init+0x2ec>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_GPIO_Init+0x1d8>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x1e2>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x1e2>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x1e2>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2a:	493b      	ldr	r1, [pc, #236]	; (8002018 <HAL_GPIO_Init+0x2e0>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4937      	ldr	r1, [pc, #220]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4933      	ldr	r1, [pc, #204]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4929      	ldr	r1, [pc, #164]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4923      	ldr	r1, [pc, #140]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	491f      	ldr	r1, [pc, #124]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4919      	ldr	r1, [pc, #100]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4915      	ldr	r1, [pc, #84]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3301      	adds	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f aeaf 	bne.w	8001d4c <HAL_GPIO_Init+0x14>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	372c      	adds	r7, #44	; 0x2c
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	10320000 	.word	0x10320000
 8002000:	10310000 	.word	0x10310000
 8002004:	10220000 	.word	0x10220000
 8002008:	10210000 	.word	0x10210000
 800200c:	10120000 	.word	0x10120000
 8002010:	10110000 	.word	0x10110000
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	40010800 	.word	0x40010800
 8002020:	40010c00 	.word	0x40010c00
 8002024:	40011000 	.word	0x40011000
 8002028:	40010400 	.word	0x40010400

0800202c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206a:	787b      	ldrb	r3, [r7, #1]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002076:	e003      	b.n	8002080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	041a      	lsls	r2, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	400b      	ands	r3, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e26c      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8087 	beq.w	80021ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d00c      	beq.n	8002102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e8:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d112      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
 80020f4:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d10b      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002102:	4b89      	ldr	r3, [pc, #548]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d06c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x12c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d168      	bne.n	80021e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e246      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x76>
 8002124:	4b80      	ldr	r3, [pc, #512]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a7f      	ldr	r2, [pc, #508]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e02e      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x98>
 800213a:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7a      	ldr	r2, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a77      	ldr	r2, [pc, #476]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0xbc>
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a71      	ldr	r2, [pc, #452]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6e      	ldr	r2, [pc, #440]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002178:	4b6b      	ldr	r3, [pc, #428]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6a      	ldr	r2, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b68      	ldr	r3, [pc, #416]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a67      	ldr	r2, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fcb6 	bl	8001b08 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fcb2 	bl	8001b08 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1fa      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xe4>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fca2 	bl	8001b08 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fc9e 	bl	8001b08 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1e6      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x10c>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f6:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x18c>
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b43      	ldr	r3, [pc, #268]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x176>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1ba      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4939      	ldr	r1, [pc, #228]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x270>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fc57 	bl	8001b08 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fc53 	bl	8001b08 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e19b      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4927      	ldr	r1, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x270>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fc36 	bl	8001b08 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fc32 	bl	8001b08 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e17a      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03a      	beq.n	8002340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d019      	beq.n	8002306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff fc16 	bl	8001b08 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fc12 	bl	8001b08 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e15a      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f000 fa9a 	bl	8002838 <RCC_Delay>
 8002304:	e01c      	b.n	8002340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7ff fbfc 	bl	8001b08 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002312:	e00f      	b.n	8002334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7ff fbf8 	bl	8001b08 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d908      	bls.n	8002334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e140      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	42420000 	.word	0x42420000
 8002330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b9e      	ldr	r3, [pc, #632]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e9      	bne.n	8002314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a6 	beq.w	800249a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b97      	ldr	r3, [pc, #604]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b94      	ldr	r3, [pc, #592]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a93      	ldr	r2, [pc, #588]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	4b91      	ldr	r3, [pc, #580]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b8e      	ldr	r3, [pc, #568]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a8a      	ldr	r2, [pc, #552]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7ff fbb9 	bl	8001b08 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7ff fbb5 	bl	8001b08 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0fd      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x4f8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x312>
 80023c0:	4b7b      	ldr	r3, [pc, #492]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a7a      	ldr	r2, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6213      	str	r3, [r2, #32]
 80023cc:	e02d      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x334>
 80023d6:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a75      	ldr	r2, [pc, #468]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a72      	ldr	r2, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	e01c      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x356>
 80023f8:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a6c      	ldr	r2, [pc, #432]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x36e>
 8002412:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a66      	ldr	r2, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a63      	ldr	r2, [pc, #396]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fb69 	bl	8001b08 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff fb65 	bl	8001b08 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0ab      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCC_OscConfig+0x37e>
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7ff fb53 	bl	8001b08 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff fb4f 	bl	8001b08 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e095      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8081 	beq.w	80025a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d061      	beq.n	8002574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d146      	bne.n	8002546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x4fc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7ff fb23 	bl	8001b08 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7ff fb1f 	bl	8001b08 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e067      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	492d      	ldr	r1, [pc, #180]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a19      	ldr	r1, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	430b      	orrs	r3, r1
 8002512:	4927      	ldr	r1, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x4fc>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff faf3 	bl	8001b08 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff faef 	bl	8001b08 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e037      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x46a>
 8002544:	e02f      	b.n	80025a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_OscConfig+0x4fc>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fadc 	bl	8001b08 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff fad8 	bl	8001b08 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e020      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x498>
 8002572:	e018      	b.n	80025a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42420060 	.word	0x42420060

080025bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0d0      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4965      	ldr	r1, [pc, #404]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a52      	ldr	r2, [pc, #328]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d040      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e073      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06b      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4936      	ldr	r1, [pc, #216]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7ff fa2c 	bl	8001b08 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7ff fa28 	bl	8001b08 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e053      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d210      	bcs.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4922      	ldr	r1, [pc, #136]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1cc>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1d0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f98a 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000
 8002780:	40021000 	.word	0x40021000
 8002784:	0800309c 	.word	0x0800309c
 8002788:	20000054 	.word	0x20000054
 800278c:	20000058 	.word	0x20000058

08002790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x36>
 80027be:	e027      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	e027      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d010      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0c5b      	lsrs	r3, r3, #17
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_RCC_GetSysClockFreq+0x98>)
 80027f2:	fb02 f203 	mul.w	r2, r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e004      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	613b      	str	r3, [r7, #16]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetSysClockFreq+0x98>)
 8002812:	613b      	str	r3, [r7, #16]
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	693b      	ldr	r3, [r7, #16]
}
 8002818:	4618      	mov	r0, r3
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	007a1200 	.word	0x007a1200
 800282c:	080030ac 	.word	0x080030ac
 8002830:	080030bc 	.word	0x080030bc
 8002834:	003d0900 	.word	0x003d0900

08002838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <RCC_Delay+0x34>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <RCC_Delay+0x38>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a5b      	lsrs	r3, r3, #9
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002854:	bf00      	nop
  }
  while (Delay --);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1e5a      	subs	r2, r3, #1
 800285a:	60fa      	str	r2, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <RCC_Delay+0x1c>
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000054 	.word	0x20000054
 8002870:	10624dd3 	.word	0x10624dd3

08002874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e041      	b.n	800290a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fee0 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f000 fa56 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e035      	b.n	8002998 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_TIM_Base_Start_IT+0x90>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_TIM_Base_Start_IT+0x4e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002956:	d004      	beq.n	8002962 <HAL_TIM_Base_Start_IT+0x4e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <HAL_TIM_Base_Start_IT+0x94>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d111      	bne.n	8002986 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d010      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002984:	e007      	b.n	8002996 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	40000400 	.word	0x40000400

080029ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f998 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f98b 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f99a 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0204 	mvn.w	r2, #4
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f972 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f965 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f974 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0208 	mvn.w	r2, #8
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f94c 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f93f 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f94e 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d020      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0210 	mvn.w	r2, #16
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f926 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f919 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f928 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00c      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0201 	mvn.w	r2, #1
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe fcec 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00c      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa6f 	bl	800301a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8f8 	bl	8002d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0220 	mvn.w	r2, #32
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa42 	bl	8003008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0b4      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x186>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	d03e      	beq.n	8002c60 <HAL_TIM_ConfigClockSource+0xd4>
 8002be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be6:	f200 8087 	bhi.w	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	f000 8086 	beq.w	8002cfe <HAL_TIM_ConfigClockSource+0x172>
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	d87f      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d01a      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xa6>
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	d87b      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d050      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	d877      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d03c      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0xfa>
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	d873      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d058      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d86f      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d064      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	d86b      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d060      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d867      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d05c      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d05a      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c30:	e062      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6899      	ldr	r1, [r3, #8]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f000 f96a 	bl	8002f1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	609a      	str	r2, [r3, #8]
      break;
 8002c5e:	e04f      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f000 f953 	bl	8002f1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c82:	609a      	str	r2, [r3, #8]
      break;
 8002c84:	e03c      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f000 f8ca 	bl	8002e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2150      	movs	r1, #80	; 0x50
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f921 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002ca4:	e02c      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 f8e8 	bl	8002e88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2160      	movs	r1, #96	; 0x60
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f911 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002cc4:	e01c      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 f8aa 	bl	8002e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f901 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 f8f8 	bl	8002ee6 <TIM_ITRx_SetConfig>
      break;
 8002cf6:	e003      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfc:	e000      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
	...

08002d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <TIM_Base_SetConfig+0xc0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_Base_SetConfig+0x28>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0x28>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <TIM_Base_SetConfig+0xc4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d108      	bne.n	8002d9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <TIM_Base_SetConfig+0xc0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0x52>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0x52>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1d      	ldr	r2, [pc, #116]	; (8002e28 <TIM_Base_SetConfig+0xc4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <TIM_Base_SetConfig+0xc0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40000400 	.word	0x40000400

08002e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f023 0201 	bic.w	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f023 030a 	bic.w	r3, r3, #10
 8002e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	031b      	lsls	r3, r3, #12
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	621a      	str	r2, [r3, #32]
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f043 0307 	orr.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	021a      	lsls	r2, r3, #8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	609a      	str	r2, [r3, #8]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e041      	b.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a10      	ldr	r2, [pc, #64]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400

08003008 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <__libc_init_array>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	2600      	movs	r6, #0
 8003030:	4d0c      	ldr	r5, [pc, #48]	; (8003064 <__libc_init_array+0x38>)
 8003032:	4c0d      	ldr	r4, [pc, #52]	; (8003068 <__libc_init_array+0x3c>)
 8003034:	1b64      	subs	r4, r4, r5
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	42a6      	cmp	r6, r4
 800303a:	d109      	bne.n	8003050 <__libc_init_array+0x24>
 800303c:	f000 f822 	bl	8003084 <_init>
 8003040:	2600      	movs	r6, #0
 8003042:	4d0a      	ldr	r5, [pc, #40]	; (800306c <__libc_init_array+0x40>)
 8003044:	4c0a      	ldr	r4, [pc, #40]	; (8003070 <__libc_init_array+0x44>)
 8003046:	1b64      	subs	r4, r4, r5
 8003048:	10a4      	asrs	r4, r4, #2
 800304a:	42a6      	cmp	r6, r4
 800304c:	d105      	bne.n	800305a <__libc_init_array+0x2e>
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	f855 3b04 	ldr.w	r3, [r5], #4
 8003054:	4798      	blx	r3
 8003056:	3601      	adds	r6, #1
 8003058:	e7ee      	b.n	8003038 <__libc_init_array+0xc>
 800305a:	f855 3b04 	ldr.w	r3, [r5], #4
 800305e:	4798      	blx	r3
 8003060:	3601      	adds	r6, #1
 8003062:	e7f2      	b.n	800304a <__libc_init_array+0x1e>
 8003064:	080030c0 	.word	0x080030c0
 8003068:	080030c0 	.word	0x080030c0
 800306c:	080030c0 	.word	0x080030c0
 8003070:	080030c4 	.word	0x080030c4

08003074 <memset>:
 8003074:	4603      	mov	r3, r0
 8003076:	4402      	add	r2, r0
 8003078:	4293      	cmp	r3, r2
 800307a:	d100      	bne.n	800307e <memset+0xa>
 800307c:	4770      	bx	lr
 800307e:	f803 1b01 	strb.w	r1, [r3], #1
 8003082:	e7f9      	b.n	8003078 <memset+0x4>

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
